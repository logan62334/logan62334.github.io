<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马飞的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://logan62334.github.io/"/>
  <updated>2019-02-26T06:39:44.790Z</updated>
  <id>http://logan62334.github.io/</id>
  
  <author>
    <name>马飞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android | 自动化测试辅助服务</title>
    <link href="http://logan62334.github.io/2017/12/27/Android%20%7C%20%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%BE%85%E5%8A%A9%E6%9C%8D%E5%8A%A1/"/>
    <id>http://logan62334.github.io/2017/12/27/Android | 自动化测试辅助服务/</id>
    <published>2017-12-27T22:48:52.000Z</published>
    <updated>2019-02-26T06:39:44.790Z</updated>
    
    <content type="html"><![CDATA[<p>今天聊聊Android的自动化测试，但这里先不讨论具体的技术方案，这些放到后面章节讨论，本文主要来跟大家分享一下自动化测试过程中一定会遇到的一些问题以及针对这些问题提供的一系列辅助服务。</p><h2 id="UI自动化测试"><a href="#UI自动化测试" class="headerlink" title="UI自动化测试"></a>UI自动化测试</h2><p>不管是通过什么方案实现的UI自动化，录制回放也好、写自动化脚本也好，都会遇到同样的问题：在不同手机上安装被测应用时弹出的系统提示框，这部分肯定是没办法通过脚本实现的，而且存在兼容性问题：不同手机的安装流程一般是不一样的，那么怎么才能让安装这部分流程自动化呢？</p><p>想想去年很火的抢红包插件，其实解决的问题是类似的就是检测屏幕的UI变化然后让系统自动去点击相应的控件元素，我们的主角登场了：AccessibilityService 具体实现参考：<a href="https://github.com/logan62334/Jarvis" target="_blank" rel="noopener">https://github.com/logan62334/Jarvis</a></p><p>安装好辅助应用后，点击图标会打开系统的辅助功能页面，这里会看到系统服务中已经注册好了一个叫智能安装服务的条目，打开该服务即可。</p><p>大家可以根据不同手机的安装提示进行适配，目前项目只适配了华为和小米的机型。</p><h2 id="Monkey"><a href="#Monkey" class="headerlink" title="Monkey"></a>Monkey</h2><p>大家做Android稳定性测试的时候一定用过Monkey吧，但是实际跑的过程中会出现各种各样的问题，比如：关掉WIFI、关掉数据流量、锁掉屏幕等，接下来针对这些问题分析下如何解决：</p><p>针对关掉WIFI这种情况比较简单的做法就是通过起一个服务监听网络状态，一旦出现WIFI关闭的情况就自动打开当然这里涉及到权限的一些问题，只适用于root过的手机或者版本比较低的系统没有很严格的权限管理；另外一种情况就是利用部分手机可以调整快捷入口的方式将WIFI这个入口隐藏掉，还有就是可以通过遮挡住通知栏这样下拉操作就不会打开WIFI的快捷入口，数据流量也是一样的道理。</p><p>对于锁屏屏幕自动熄灭这样的情况，一种方式就是通过手机系统设置让屏幕常亮，另外一种方式就是通过PowerManager、KeyguardManager等来唤醒解锁Android设备或模拟器，具体实现方式参考：<a href="https://github.com/logan62334/Jarvis" target="_blank" rel="noopener">https://github.com/logan62334/Jarvis</a></p><h2 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h2><p>另外可能在自动化测试的过程中我们希望控制系统的wifi、数据流量、动画等的状态，那么可以通过广播的形式来实现，具体方式参考：<br><a href="https://github.com/logan62334/Jarvis" target="_blank" rel="noopener">https://github.com/logan62334/Jarvis</a></p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天聊聊Android的自动化测试，但这里先不讨论具体的技术方案，这些放到后面章节讨论，本文主要来跟大家分享一下自动化测试过程中一定会遇到的一些问题以及针对这些问题提供的一系列辅助服务。&lt;/p&gt;
&lt;h2 id=&quot;UI自动化测试&quot;&gt;&lt;a href=&quot;#UI自动化测试&quot; cla
      
    
    </summary>
    
      <category term="Android 自动化测试" scheme="http://logan62334.github.io/categories/Android-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Android 自动化测试" scheme="http://logan62334.github.io/tags/Android-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python | 获取iOS设备信息的轻量级框架</title>
    <link href="http://logan62334.github.io/2017/12/26/Python%20%7C%20%E8%8E%B7%E5%8F%96iOS%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A1%86%E6%9E%B6/"/>
    <id>http://logan62334.github.io/2017/12/26/Python | 获取iOS设备信息的轻量级框架/</id>
    <published>2017-12-26T22:48:52.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<p>今天接着上一篇<a href="http://mp.weixin.qq.com/s?__biz=MzIyMzE3MTY3MA==&amp;mid=2651317842&amp;idx=1&amp;sn=35b85e6bac55fa6bf2d0b855698e5cf8&amp;chksm=f3d1036bc4a68a7d327275d14220b1edbb848ea234f4f35d3ed659765b7b1737275efbc0c3f3&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Python | 获取Android设备信息的轻量级框架</a>，来讲讲</p><p>如何通过Python实现一个轻量级的库来获取电脑上连接的iOS设备信息。</p><p>这个库只有一个文件，通过封装<strong><em>libimobiledevice</em></strong>命令实现，返回的是一个包含所有设备信息的标准json格式的列表方便解析，下面简单介绍一下：</p><h2 id="libimobiledevice命令封装"><a href="#libimobiledevice命令封装" class="headerlink" title="libimobiledevice命令封装"></a>libimobiledevice命令封装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@staticmethod</span><br><span class="line">def get_ios_devices():</span><br><span class="line">    devices = []</span><br><span class="line">    output = Shell.invoke(&apos;idevice_id -l&apos;)</span><br><span class="line">    config_file = os.path.join(os.path.dirname(__file__), &apos;ios_mapping.json&apos;)</span><br><span class="line">    with open(config_file, &apos;r&apos;) as f:</span><br><span class="line">        config = json.loads(f.read())</span><br><span class="line"></span><br><span class="line">    if len(output) &gt; 0:</span><br><span class="line">        udids = output.strip(&apos;\n&apos;).split(&apos;\t&apos;)</span><br><span class="line">        for udid in udids:</span><br><span class="line">            dic = &#123;&quot;os_type&quot;: &apos;iOS&apos;, &quot;uid&quot;: udid&#125;</span><br><span class="line">            output = Shell.invoke(&apos;ideviceinfo -u %s -k ProductType&apos; % udid)</span><br><span class="line">            device_type = config[output.strip(&apos;\n&apos;)]</span><br><span class="line">            brand = &apos;&apos;</span><br><span class="line">            # -1表示找不到 0表示下标</span><br><span class="line">            if device_type.find(&quot;iPhone&quot;) != -1:</span><br><span class="line">                brand = &apos;iPhone&apos;</span><br><span class="line">            elif device_type.find(&quot;iPad&quot;) != -1:</span><br><span class="line">                brand = &apos;iPad&apos;</span><br><span class="line">            elif device_type.find(&quot;iPod&quot;) != -1:</span><br><span class="line">                brand = &apos;iPod&apos;</span><br><span class="line"></span><br><span class="line">            dic[&apos;brand&apos;] = brand</span><br><span class="line">            dic[&apos;model&apos;] = device_type</span><br><span class="line"></span><br><span class="line">            output = Shell.invoke(&apos;ideviceinfo -u %s -k ProductVersion&apos; % udid)</span><br><span class="line">            dic[&apos;os_type&apos;] = &apos;iOS&apos;</span><br><span class="line">            dic[&apos;os_version&apos;] = output.strip(&apos;\n&apos;)</span><br><span class="line">            dic[&apos;rom_version&apos;] = output.strip(&apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">            output = Shell.invoke(&apos;idevicename -u %s&apos; % udid)</span><br><span class="line">            dic[&apos;device_name&apos;] = output.strip(&apos;\n&apos;)</span><br><span class="line">            devices.append(dic)</span><br><span class="line">    return devices</span><br></pre></td></tr></table></figure><h2 id="设备信息数据结构"><a href="#设备信息数据结构" class="headerlink" title="设备信息数据结构"></a>设备信息数据结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;uid&quot;: &quot;xxxxxxxxxxxxxx1f8a4dcfaac1fd01&quot;,</span><br><span class="line">        &quot;rom_version&quot;: &quot;11.0.3&quot;,</span><br><span class="line">        &quot;brand&quot;: &quot;iPhone&quot;,</span><br><span class="line">        &quot;device_name&quot;: &quot;马飞的 iPhone&quot;,</span><br><span class="line">        &quot;os_version&quot;: &quot;11.0.3&quot;,</span><br><span class="line">        &quot;model&quot;: &quot;iPhone6s&quot;,</span><br><span class="line">        &quot;os_type&quot;: &quot;iOS&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注：有时候会报Couldn’t connect to lockdown这样的错误，执行下面命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ brew uninstall ideviceinstaller</span><br><span class="line">$ brew uninstall libimobiledevice</span><br><span class="line">$ brew install --HEAD libimobiledevice</span><br><span class="line">$ brew install ideviceinstaller</span><br></pre></td></tr></table></figure></p><p>这个库我已经上传到Pypi仓库，源码在github：<a href="https://github.com/logan62334/python-apptoolkit，点击阅读原文可以访问" target="_blank" rel="noopener">https://github.com/logan62334/python-apptoolkit，点击阅读原文可以访问</a></p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天接着上一篇&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIyMzE3MTY3MA==&amp;amp;mid=2651317842&amp;amp;idx=1&amp;amp;sn=35b85e6bac55fa6bf2d0b855698e5cf8&amp;amp
      
    
    </summary>
    
      <category term="Python iOS" scheme="http://logan62334.github.io/categories/Python-iOS/"/>
    
    
      <category term="Python iOS" scheme="http://logan62334.github.io/tags/Python-iOS/"/>
    
  </entry>
  
  <entry>
    <title>Android | 图解外部存储和内部存储</title>
    <link href="http://logan62334.github.io/2017/12/19/Android%20%7C%20%E5%9B%BE%E8%A7%A3%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E5%92%8C%E5%86%85%E9%83%A8%E5%AD%98%E5%82%A8/"/>
    <id>http://logan62334.github.io/2017/12/19/Android | 图解外部存储和内部存储/</id>
    <published>2017-12-19T22:53:33.000Z</published>
    <updated>2019-02-26T06:39:44.790Z</updated>
    
    <content type="html"><![CDATA[<h3 id="存储概述"><a href="#存储概述" class="headerlink" title="存储概述"></a>存储概述</h3><p>Android中根据数据是否为应用私有、是否需要给外部应用暴露以及数据的大小可以有以下几种选择：</p><ul><li>Shared Preferences</li><li>内部存储</li><li>外部存储</li><li>本地数据库存储</li><li>通过网络在服务器端数据库存储</li></ul><p>今天我们重点解释下内外部存储到底是什么有哪些区别，请看下图：<br><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/79.jpeg" alt></p><h3 id="内外部存储的区别"><a href="#内外部存储的区别" class="headerlink" title="内外部存储的区别"></a>内外部存储的区别</h3><ul><li>按照内外部存储：带External字眼则一定是外部存储的方法，如 getExternalFilesDir() ，外部存储需要运行时权限；</li><li>按照公有私有性质：公有文件是Environment调用函数，而私有文件（包括内部私有与外部私有）是Context调用函数，公有文件不会随着app卸载而删除而私有则会，私有文件不会被Media Scanner扫描到。</li></ul><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;存储概述&quot;&gt;&lt;a href=&quot;#存储概述&quot; class=&quot;headerlink&quot; title=&quot;存储概述&quot;&gt;&lt;/a&gt;存储概述&lt;/h3&gt;&lt;p&gt;Android中根据数据是否为应用私有、是否需要给外部应用暴露以及数据的大小可以有以下几种选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Android" scheme="http://logan62334.github.io/categories/Android/"/>
    
    
      <category term="Android 存储" scheme="http://logan62334.github.io/tags/Android-%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python | 获取Android设备信息的轻量级框架</title>
    <link href="http://logan62334.github.io/2017/12/17/Python%20%7C%20%E8%8E%B7%E5%8F%96Android%E8%AE%BE%E5%A4%87%E4%BF%A1%E6%81%AF%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A1%86%E6%9E%B6/"/>
    <id>http://logan62334.github.io/2017/12/17/Python | 获取Android设备信息的轻量级框架/</id>
    <published>2017-12-17T22:48:52.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<p>今天跟大家分享一下，如何通过Python实现一个轻量级的库来获取电脑上连接的Android设备信息，为什么说轻量呢因为整个库也就4KB，相比其他诸如Appetizer这样动辄就8MB多的库要轻很多，而且也基本满足项目中的需求。</p><p>这个库只有一个文件，通过封装Android的ADB命令实现，返回的是一个包含所有设备信息的标准json格式的列表方便解析，下面简单介绍一下：</p><h3 id="检查环境变量"><a href="#检查环境变量" class="headerlink" title="检查环境变量"></a>检查环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 判断是否设置环境变量ANDROID_HOME</span><br><span class="line">if &quot;ANDROID_HOME&quot; in os.environ:</span><br><span class="line">    command = os.path.join(</span><br><span class="line">        os.environ[&quot;ANDROID_HOME&quot;],</span><br><span class="line">        &quot;platform-tools&quot;,</span><br><span class="line">        &quot;adb&quot;)</span><br><span class="line">else:</span><br><span class="line">    raise EnvironmentError(</span><br><span class="line">        &quot;Adb not found in $ANDROID_HOME path: %s.&quot; %</span><br><span class="line">        os.environ[&quot;ANDROID_HOME&quot;])</span><br></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Shell:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def invoke(cmd):</span><br><span class="line">        output, errors = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()</span><br><span class="line">        o = output.decode(&quot;utf-8&quot;)</span><br><span class="line">        return o</span><br></pre></td></tr></table></figure><h3 id="ADB命令封装"><a href="#ADB命令封装" class="headerlink" title="ADB命令封装"></a>ADB命令封装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">class ADB(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">      参数:  device_id</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, device_id=&quot;&quot;):</span><br><span class="line"></span><br><span class="line">        if device_id == &quot;&quot;:</span><br><span class="line">            self.device_id = &quot;&quot;</span><br><span class="line">        else:</span><br><span class="line">            self.device_id = &quot;-s %s&quot; % device_id</span><br><span class="line"></span><br><span class="line">    def adb(self, args):</span><br><span class="line">        cmd = &quot;%s %s %s&quot; % (command, self.device_id, str(args))</span><br><span class="line">        return Shell.invoke(cmd)</span><br><span class="line"></span><br><span class="line">    def shell(self, args):</span><br><span class="line">        cmd = &quot;%s %s shell %s&quot; % (command, self.device_id, str(args),)</span><br><span class="line">        return Shell.invoke(cmd)</span><br><span class="line"></span><br><span class="line">    def get_device_state(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        获取设备状态： offline | bootloader | device</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.adb(&quot;get-state&quot;).stdout.read().strip()</span><br><span class="line"></span><br><span class="line">    def get_device_id(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        获取设备id号，return serialNo</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.adb(&quot;get-serialno&quot;).stdout.read().strip()</span><br><span class="line"></span><br><span class="line">    def get_android_version(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        获取设备中的Android版本号，如4.2.2</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.shell(</span><br><span class="line">            &quot;getprop ro.build.version.release&quot;).strip()</span><br><span class="line"></span><br><span class="line">    def get_sdk_version(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        获取设备SDK版本号，如：24</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.shell(&quot;getprop ro.build.version.sdk&quot;).strip()</span><br><span class="line"></span><br><span class="line">    def get_product_brand(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        获取设备品牌，如：HUAWEI</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.shell(&quot;getprop ro.product.brand&quot;).strip()</span><br><span class="line"></span><br><span class="line">    def get_product_model(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        获取设备型号，如：MHA-AL00</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.shell(&quot;getprop ro.product.model&quot;).strip()</span><br><span class="line"></span><br><span class="line">    def get_product_rom(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        获取设备ROM名，如：MHA-AL00C00B213</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return self.shell(&quot;getprop ro.build.display.id&quot;).strip()</span><br></pre></td></tr></table></figure><h3 id="设备信息获取"><a href="#设备信息获取" class="headerlink" title="设备信息获取"></a>设备信息获取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class DeviceInfo:</span><br><span class="line">    def __init__(self, uid, os_type, os_version, sdk_version, brand, model, rom_version):</span><br><span class="line">        self.uid = uid</span><br><span class="line">        self.os_type = os_type</span><br><span class="line">        self.os_version = os_version</span><br><span class="line">        self.sdk_version = sdk_version</span><br><span class="line">        self.brand = brand</span><br><span class="line">        self.model = model</span><br><span class="line">        self.rom_version = rom_version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Device:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def get_android_devices():</span><br><span class="line">        android_devices_list = []</span><br><span class="line">        android_devices_infos = []</span><br><span class="line">        for device in Shell.invoke(&apos;adb devices&apos;).splitlines():</span><br><span class="line">            if &apos;device&apos; in device and &apos;devices&apos; not in device:</span><br><span class="line">                device = device.split(&apos;\t&apos;)[0]</span><br><span class="line">                android_devices_list.append(device)</span><br><span class="line">        for device_uid in android_devices_list:</span><br><span class="line">            device_info = DeviceInfo(device_uid, &quot;Android&quot;, ADB(device_uid).get_android_version(),</span><br><span class="line">                                     ADB(device_uid).get_sdk_version(),</span><br><span class="line">                                     ADB(device_uid).get_product_brand(), ADB(device_uid).get_product_model(),</span><br><span class="line">                                     ADB(device_uid).get_product_rom())</span><br><span class="line">            android_devices_infos.append(device_info.__dict__)</span><br><span class="line">        return android_devices_infos</span><br></pre></td></tr></table></figure><h3 id="设备信息数据结构"><a href="#设备信息数据结构" class="headerlink" title="设备信息数据结构"></a>设备信息数据结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;uid&quot;: &quot;BY2WKN1519078327&quot;,</span><br><span class="line">        &quot;rom_version&quot;: &quot;Che2-UL00 V100R001CHNC00B287&quot;,</span><br><span class="line">        &quot;brand&quot;: &quot;Honor&quot;,</span><br><span class="line">        &quot;os_version&quot;: &quot;4.4.2&quot;,</span><br><span class="line">        &quot;sdk_version&quot;: &quot;19&quot;,</span><br><span class="line">        &quot;os_type&quot;: &quot;Android&quot;,</span><br><span class="line">        &quot;model&quot;: &quot;Che2-UL00&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;uid&quot;: &quot;GWY0217414001213&quot;,</span><br><span class="line">        &quot;rom_version&quot;: &quot;MHA-AL00C00B213&quot;,</span><br><span class="line">        &quot;brand&quot;: &quot;HUAWEI&quot;,</span><br><span class="line">        &quot;os_version&quot;: &quot;7.0&quot;,</span><br><span class="line">        &quot;sdk_version&quot;: &quot;24&quot;,</span><br><span class="line">        &quot;os_type&quot;: &quot;Android&quot;,</span><br><span class="line">        &quot;model&quot;: &quot;MHA-AL00&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="安装-amp-更新"><a href="#安装-amp-更新" class="headerlink" title="安装&amp;更新"></a>安装&amp;更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U apptoolkit</span><br></pre></td></tr></table></figure><p>这个库我已经上传到Pypi仓库，源码在github：<a href="https://github.com/logan62334/python-apptoolkit" target="_blank" rel="noopener">https://github.com/logan62334/python-apptoolkit</a></p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天跟大家分享一下，如何通过Python实现一个轻量级的库来获取电脑上连接的Android设备信息，为什么说轻量呢因为整个库也就4KB，相比其他诸如Appetizer这样动辄就8MB多的库要轻很多，而且也基本满足项目中的需求。&lt;/p&gt;
&lt;p&gt;这个库只有一个文件，通过封装An
      
    
    </summary>
    
      <category term="Python Android" scheme="http://logan62334.github.io/categories/Python-Android/"/>
    
    
      <category term="Python Android" scheme="http://logan62334.github.io/tags/Python-Android/"/>
    
  </entry>
  
  <entry>
    <title>Python | 一个快速实现CLI 应用程序的脚手架</title>
    <link href="http://logan62334.github.io/2017/12/02/Python%20%7C%20%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0CLI%20%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>http://logan62334.github.io/2017/12/02/Python | 一个快速实现CLI 应用程序的脚手架/</id>
    <published>2017-12-02T22:48:52.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<p>今天跟大家分享一下如何快速实现一个Python CLI应用程序的脚手架，之所以会做这个是因为当时需要做一个运维的小工具希望用命令行的方式来使用，但是搜遍网上很多资料都没有系统讲解从开发、集成、发布、文档等一系列流程的文章。</p><h3 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h3><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Python/1.png" alt></p><p>如上图，这就是一个比较规范的Python CLI应用项目了，下面一一讲下各文件的用途：</p><h3 id="项目文档"><a href="#项目文档" class="headerlink" title="项目文档"></a>项目文档</h3><hr><p>这里我们用Sphinx来实现文档的自动生成，当然你要首先通过markdown和rst文件定义好文档的内容，然后进入docs目录执行 make html命令就可以在_build目录下生成对应的静态文件，如下图：</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Python/2.png" alt></p><p>具体Sphinx如何使用以及配置后面会单独文章讲解</p><h3 id="主工程"><a href="#主工程" class="headerlink" title="主工程"></a>主工程</h3><hr><p>这里讲几个需要注意的地方<br>1、日志的配置：<br>这里可以全局设置日志的一些输出级别和格式化方式</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Python/4.png" alt></p><p>2、cli文件<br>这里通过click库来实现</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Python/5.png" alt></p><p>3、二进制文件打包</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Python/3.png" alt></p><p>如上图，有时候我们的工程中会包含二进制文件，也就是非Python代码的文件，这时候如果还是像往常一样打包发布，安装的时候会发现无法找到此文件，所以需要在根目录的MANIFEST.in文件中加入</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Python/6.png" alt></p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><hr><p>如下图，这里的make-release文件主要是用来自动控制版本的，如下图，通过Git 的提交记录了来作为项目的唯一版本号标识，再对<strong>init</strong>文件进行重新写入达到持续集成时版本号自增的目的。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Python/7.png" alt></p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><hr><p>test文件夹中存放的就是项目的单元测试文件了，这里就不细展开讲了，后面会具体讲讲如何跟Jenkins集成实现静态代码检查</p><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><hr><p>最重要的就是setup.py这个文件了，项目最后打包发布到pypi仓库主要的配置信息都在这里了，如下图：</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Python/8.png" alt></p><p>这个脚手架的项目地址：<a href="https://github.com/logan62334/python-cli-template" target="_blank" rel="noopener">https://github.com/logan62334/python-cli-template</a><br>项目会持续更新，可以点击阅读原文访问</p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天跟大家分享一下如何快速实现一个Python CLI应用程序的脚手架，之所以会做这个是因为当时需要做一个运维的小工具希望用命令行的方式来使用，但是搜遍网上很多资料都没有系统讲解从开发、集成、发布、文档等一系列流程的文章。&lt;/p&gt;
&lt;h3 id=&quot;工程结构&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Python" scheme="http://logan62334.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://logan62334.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>DevOps | 实现命令行交互自动化</title>
    <link href="http://logan62334.github.io/2017/12/01/DevOps%20%7C%20%E5%AE%9E%E7%8E%B0%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BA%A4%E4%BA%92%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>http://logan62334.github.io/2017/12/01/DevOps | 实现命令行交互自动化/</id>
    <published>2017-12-01T22:48:52.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>嗨呀，好久没有更新了，最近几个月一直忙着部门内质量平台的建设，因为是新成立的小组所以很多东西都是从零开始做，这期间做了很多跟自动化、代码质量和工程效率相关的事情，接下来一段时间会慢慢把其中一些有趣的东西整理出来跟大家分享。</p></blockquote><p>今天先来介绍一个Python中用来实现命令行交互自动化的模块，之所以会有这样的需求是因为我们希望把一些繁琐的命令行交互过程给透明化这样对用户来说会友好很多降低使用成本，如下图：</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/DevOps/1.png" alt></p><p>这里是一个典型的需要用户交互的命令行操作，当执行命令后会提示用户输入测试脚本文件名，回车后会再提示用户输入app的路径，如何让这一过程自动化呢？</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/DevOps/2.png" alt></p><p>就是它了shutit，其实还有个工具 pexpect 但是我试了好多次都没能达到想要的效果，而且网上大部分给出的解决方案也都是针对ssh登录自动化的，对于一个普遍的交互式命令行却不支持，当然也可能是我使用姿势不对？如果大家有通过pexpect实现的还请跟我交流哈</p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;嗨呀，好久没有更新了，最近几个月一直忙着部门内质量平台的建设，因为是新成立的小组所以很多东西都是从零开始做，这期间做了很多跟自动化、代码质量和工程效率相关的事情，接下来一段时间会慢慢把其中一些有趣的东西整理出来跟大家分享。&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
      <category term="DevOps" scheme="http://logan62334.github.io/categories/DevOps/"/>
    
    
      <category term="DevOps Python" scheme="http://logan62334.github.io/tags/DevOps-Python/"/>
    
  </entry>
  
  <entry>
    <title>Macaca 面向多端的自动化测试解决方案</title>
    <link href="http://logan62334.github.io/2017/06/22/Macaca%20%E9%9D%A2%E5%90%91%E5%A4%9A%E7%AB%AF%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://logan62334.github.io/2017/06/22/Macaca 面向多端的自动化测试解决方案/</id>
    <published>2017-06-22T22:39:58.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><hr><p>对于基于 UI 的功能测试的需求其实一直存在，理由其实很简单，不想一直让人去做重复机械的事情，而且可靠性完全是靠人力的堆积产生。然而目前部门的功能测试工作依然主要是依靠人工来完成，从我们公司的实践来看我觉得有几个方面的影响因素：</p><p>客户端APP已经实现模块化开发，而且外卖平台移动端的开发迭代流程正在进行改造，目标是从固定每三周一个迭代改造为每周一个发布窗口，版本迭代的提速，设备的碎片化，都给测试工作带来巨大的挑战。<br>由于版本迭代周期越来越短，而且UI变动比较频繁，因此测试编写测试代码的积极性不是很高，同时由于测试代码的可重复利用性差，导致测试脚本的编写成本和维护成本偏高 。<br>部分测试人员的编码能力不是很强。由于大部分测试人员可能并没有过多的开发经验，所以在编写测试代码时并不能很顺畅的完成自己想要的效果，这样也会导致测试代码项目的推广阻力会比较大。</p><p>如何在有限的时间内，追求尽可能高的产品质量？录放平台是我们推出的解决方案。它支持本地化UI脚本录制，集中式脚本管理，分布式脚本执行。业务测试只要开启我们的服务，就可以在业务测试的过程中，自动生成对Android、iOS和Web页面的自动化脚本，而自动化脚本在批量设备上的回放，可以极大提高关键路径的覆盖率，提升兼容性测试的效率，从而可以把业务测试从冗长重复的步骤中解放出来，把精力放到边界，异常等可以给我们产品带来更多提升的地方。 </p><p>通过不断地寻找，不断地对比，最终我们将目标聚焦在阿里巴巴开源解决方案Macaca上。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><hr><p>Macaca是一套完整的自动化测试解决方案，它的三个特性对我们极具吸引力：</p><p>1、周边工具支持（Reliable、app-inspector、UI-Recorder等）<br>2、它是一个轻量化的开源项目<br>3、社区活跃，中文文档丰富<br>4、支持JS、Python、Java编写自动化脚本<br>5、API比较统一</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><hr><p>在落地Macaca之前，需要先部署下列技术栈：<br>1、Node.js用于部署Macaca<br>2、Docker用于容器化Macaca的部署环境<br>3、Gitlab用于存储代码和测试用例<br>4、Slack用于团队的沟通协调<br>5、Python用于部署本地Agent</p><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><hr><p>业务测试人员通过在本地录制好测试脚本，然后上传到脚本管理平台，这些测试脚本将会根据业务模块和版本分类管理。使用者在自己的电脑上安装Agent，然后连接测试设备，Agent会将本机的ip、port和设备信息上传注册到录放平台。</p><p>新建一个task执行脚本回放操作，可以指定在哪些机器上回放也可以推送到STF手机管理平台批量回放，测试用例运行之后，会有两种情况发生：如果成功，则可以直接查看生成报告；否则会通过Slack或邮件通知开发人员测试失败，重新修改代码。</p><p>另外Macaca也提供了相应的分布式持续集成框架Reliable来进行任务管理。</p><h3 id="Reliable"><a href="#Reliable" class="headerlink" title="Reliable"></a>Reliable</h3><hr><p>下图是Reliable的界面，通过Reliable用户可以查看测试用例和测试结果；并且Reliable天生与Macaca无缝衔接。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/72.jpeg" alt></p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/73.jpeg" alt></p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/74.jpeg" alt></p><h3 id="Inspector"><a href="#Inspector" class="headerlink" title="Inspector"></a>Inspector</h3><hr><p>Macaca中还提供了Inspector工具供用户直观、方便查找到想要选中的元素。图中右侧一栏提供的是XPS、ID、Name数据，用户通过Inspector工具寻找目标界面的元素。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/75.jpeg" alt></p><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><hr><p>我们选择Visual Studio Code作为常用的IDE因为它能够轻量地、方便地支持使用者Debug，用户可以根据自己喜好选择相应地调试工具。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/76.jpeg" alt></p><h3 id="UI-Recorder"><a href="#UI-Recorder" class="headerlink" title="UI Recorder"></a>UI Recorder</h3><hr><p>下图是简单的登录测试用例：输入用户名和密码，然后点击登录按钮。UI-Recorder脚本录制工具可以快速的通过录制得到脚本，方便新手入门。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/77.jpeg" alt></p><h3 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h3><hr><p>最终的测试结果需要与饿了么的质量平台对接（Macaca产生的测试报告、测试结果数据在导入饿了么质量平台前需要进行数据转换），形成完整的测试流程。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/78.jpeg" alt></p><p>上面总结了一下自己在调研并选择UI自动化框架中的一些思考，希望能给处于UI自动化调研初期的同学们一些帮助，其中很多选择是出于自身业务的需要，仅供参考，希望大家能结合自身业务的需要，找到适合自己的UI自动化框架。另外如果有对此框架感兴趣的同学欢迎一起学习交流。</p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="全栈增长工程师，欢迎关注"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;对于基于 UI 的功能测试的需求其实一直存在，理由其实很简单，不想一直让人去做重复机械的事情，而且可靠性完全是靠人力的堆积产生。然
      
    
    </summary>
    
      <category term="自动化测试" scheme="http://logan62334.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="自动化测试" scheme="http://logan62334.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>配置Android项目 - 版本名称和代码</title>
    <link href="http://logan62334.github.io/2017/03/22/%E9%85%8D%E7%BD%AEAndroid%E9%A1%B9%E7%9B%AE%20-%20%E7%89%88%E6%9C%AC%E5%90%8D%E7%A7%B0%E5%92%8C%E4%BB%A3%E7%A0%81/"/>
    <id>http://logan62334.github.io/2017/03/22/配置Android项目 - 版本名称和代码/</id>
    <published>2017-03-22T11:39:58.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Version-Name-amp-Code"><a href="#Version-Name-amp-Code" class="headerlink" title="Version Name &amp; Code"></a>Version Name &amp; Code</h3><p>开发人员通常给android versionName＆versionCode使用一些硬编码值。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/42.png" alt="42"></p><p>这种方法有几个缺点：</p><ul><li>你永远不知道哪个提交代表一个特定的版本。</li><li>每当你增加versionCode和更改versionName，你必须修改build.gradle文件。</li></ul><p>如果你使用git作为源代码控制系统，它也可以帮助你生成android versionName＆versionCode。常见的做法是使用git标签来指示新版本的发布。<img src="https://github.com/logan62334/ImageArchive/raw/master/Android/43.png" alt="43"></p><h3 id="Version-Name"><a href="#Version-Name" class="headerlink" title="Version Name"></a>Version Name</h3><p>对于versionName，我们可以使用git describe命令。</p><blockquote><p>a.该命令查找从提交开始可访问的最近的标记。</p><p>b.如果标记指向提交，则只显示标记。</p><p>c.否则，它将标记名称与标记对象顶部的附加提交数以及最近提交的缩写对象名称作为后缀。</p></blockquote><p><strong>Example (a-b)</strong></p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/44.png" alt="44"></p><ol><li>使用tag1.0标记特定提交</li><li>签出此提交</li><li>调用git describe -tags</li><li>输出：1.0</li></ol><p>正如你看到的，如果你使用一些标签在一个HEAD提交上调用git describe，它会输出这个标签。</p><p><strong>Example (a-c)</strong></p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/45.png" alt="45"></p><ol><li>标记tag为1.0的提交</li><li>再添加两个提交</li><li>调用git describe -tags</li><li>输出：<em>1.0-2-gdca226a</em></li></ol><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/46.png" alt="46"></p><p>使用git提交哈希“1.0-2-gdca226a”，我们可以很容易地找出从哪个特定的提交构建。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/47.png" alt="47"></p><h3 id="Version-Code"><a href="#Version-Code" class="headerlink" title="Version Code"></a><strong>Version Code</strong></h3><p>对于versionCode，我们可以使用标签的总数。因为每个git标签指示一些版本，下一版本的versionCode将总是大于previous。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/48.png" alt="48"></p><p>在上面的示例中，我们有3个标签。这个值将用于我们的versionCode。</p><p>但是我们不会为每个中间版本创建一个git标签，因此对于dev build我们可以使用HEAD提交的时间戳。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/49.png" alt="49"></p><p>在上面的示例中，HEAD提交的时间戳等于1484407970（自UNIX纪元1970年1月1日00:00:00 UTC以来的秒数）。这个值将用于我们的versionCode。如果你想将它转换为人类可读的日期使用currentmillis.com网站。在我们的情况下，它是Sat 1月14日2017 15:32:50 UTC。</p><h3 id="Groovy-way-to-use-git"><a href="#Groovy-way-to-use-git" class="headerlink" title="Groovy way to use git"></a><em>Groovy</em> way to use <em>git</em></h3><p>要使用git我建议使用一个称为grgit的库。创建具有以下内容的script-git-version.gradle文件：</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/50.png" alt="50"></p><p>将其应用于您的build.gradle文件：</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/51.png" alt="51"></p><p>要检查version name 和 code是否正确生成调用gradle任务./gradlew printVersion它给出类似的输出：</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/52.png" alt="52"></p><p>最后在build.gradle文件中使用gitVersionName，gitVersionCode和gitVersionCodeTime变量。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/53.png" alt="53"></p><p>运行项目并验证应用版本。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/54.png" alt="54"></p><p>这种方法的好处：</p><ul><li>不需要修改build.gradle文件 -  versionCode和versionName是自动生成的。</li><li>你可以很容易地找出从哪个提交生成。</li></ul><blockquote><p>注：你可以尝试其他的方式来标记版本名：包括分支名称，时间戳等。</p></blockquote><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="全栈增长工程师，欢迎关注"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Version-Name-amp-Code&quot;&gt;&lt;a href=&quot;#Version-Name-amp-Code&quot; class=&quot;headerlink&quot; title=&quot;Version Name &amp;amp; Code&quot;&gt;&lt;/a&gt;Version Name &amp;amp; Co
      
    
    </summary>
    
      <category term="Android架构" scheme="http://logan62334.github.io/categories/Android%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Android架构" scheme="http://logan62334.github.io/tags/Android%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>配置Android项目 - 静态代码分析工具</title>
    <link href="http://logan62334.github.io/2017/03/21/%E9%85%8D%E7%BD%AEAndroid%E9%A1%B9%E7%9B%AE%20-%20%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://logan62334.github.io/2017/03/21/配置Android项目 - 静态代码分析工具/</id>
    <published>2017-03-21T11:39:58.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态代码分析工具"><a href="#静态代码分析工具" class="headerlink" title="静态代码分析工具"></a>静态代码分析工具</h3><p>静态代码分析工具 - 分析代码而不执行它。通常用于发现错误或确保符合编码指南。有助于保持你的代码健康，并保持代码质量。</p><p>在Android上，最流行的代码分析工具是：</p><ul><li>Lint</li><li>PMD</li><li>Findbugs</li></ul><p>我通常将静态代码分析脚本和相关文件保存在单独的文件夹中。</p><h3 id="Lint"><a href="#Lint" class="headerlink" title="Lint"></a>Lint</h3><blockquote><p>lint工具检查你的Android项目源文件是否存在潜在错误，并针对正确性，安全性，性能，可用性，可访问性和国际化进行优化改进。</p></blockquote><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>添加lint到你的android项目创建script-lint.gradle文件。<img src="https://github.com/logan62334/ImageArchive/raw/master/Android/55.png" alt="55"></p><p>重要的lint选项：</p><ul><li><em>lintConfig</em> —lint规则集的路径（可以用来配置压制警告）。</li><li><em>htmlOutput</em> —html报告生成的地方。</li></ul><p>将script-lint.gradle导入到build.gradle文件。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/56.png" alt="56"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>重新构建你的项目，然后使用./gradlew lint命令运行lint。如果它发现一些问题，你会看到类似下面的输出。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/57.png" alt="57"></p><p>当你打开lint.html报告文件时，你将看到问题列表描述，和如何解决它们的建议。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/58.png" alt="58"></p><p>如果你想忽略此问题，请将以下规则添加到rules-lint.xml文件中。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/59.png" alt="59"></p><p>注意：还有其他方法可以压制lint警告。有关lint的更多信息，请访问官方网站。</p><h3 id="Findbugs"><a href="#Findbugs" class="headerlink" title="Findbugs"></a><strong>Findbugs</strong></h3><blockquote><p>静态代码分析工具，用于分析Java字节码并检测各种各样的问题。</p></blockquote><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>要添加findbug到你的android项目需要创建script-findbugs.gradle文件。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/60.png" alt="60"></p><p>重要的findbugs选项：</p><ul><li><em>excludeFilter</em> —findbugs规则集文件所在的路径，你可以在其中压制问题。</li><li><em>classes</em> — 生成的类的路径（如果你有多个<em>flavor</em>，路径由<em>flavor</em>名称组成，在当前情况下为“dev”）。</li><li><em>source</em> —源代码的路径</li><li><em>html.destination</em> —html报告生成的路径</li></ul><p>将script-findbugs.gradle导入到build.gradle文件。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/61.png" alt="61"></p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>为了测试，我们将创建以下方法。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/62.png" alt="62"></p><p>重新构建你的项目，然后运行findbugs ./gradlew findbugs命令。如果它发现一些问题，你会看到类似下面的输出。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/63.png" alt="63"></p><p>当你打开findbugs.html报告文件，你将看到问题列表与说明和如何解决它们的建议。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/64.png" alt="64"></p><p>如果你想忽略此问题，请将以下规则添加到rules-findbugs.xml文件中。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/65.png" alt="65"></p><p>注意：还有其他方法去压制findbugs警告。有关findbugs的更多信息，请访问官方网站。</p><h3 id="PMD"><a href="#PMD" class="headerlink" title="PMD"></a>PMD</h3><blockquote><p>PMD是一个源代码分析器。它发现常见的编程缺陷，如未使用的变量，空catch块，不必要的对象创建等等。</p></blockquote><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>要添加pmd到你的android项目那么需要创建script-pmd.gradle文件。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/66.png" alt="66"></p><p>重要的pmd选项：</p><ul><li><em>ruleSetFiles</em> —pmd规则集文件的路径，你可以在其中压制问题并定义要跟踪的问题。</li><li><em>source</em> —源代码的路径</li><li><em>html.destination</em> —html报告生成的路径</li></ul><p>将脚本<em>script-pmd.gradle</em>导入到build.gradle文件。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/67.png" alt="67"></p><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><p>为了测试，我们将创建以下方法。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/68.png" alt="68"></p><p>重新构建你的项目，然后使用./gradlew pmd命令运行pmd。如果它发现一些问题，你会看到类似下面的输出。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/69.png" alt="69"></p><p>当你打开pmd.html报告文件，你将看到问题列表与说明和如何解决它们的建议。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/70.png" alt="70"></p><p>如果你想忽略此问题，请将以下规则添加到rules-pmd.xml文件中。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/71.png" alt="71"></p><p>注意：还有其他方法压制pmd警告。有关pmd的更多信息，请访问官方网站。</p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="全栈增长工程师，欢迎关注"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;静态代码分析工具&quot;&gt;&lt;a href=&quot;#静态代码分析工具&quot; class=&quot;headerlink&quot; title=&quot;静态代码分析工具&quot;&gt;&lt;/a&gt;静态代码分析工具&lt;/h3&gt;&lt;p&gt;静态代码分析工具 - 分析代码而不执行它。通常用于发现错误或确保符合编码指南。有助于保持你的
      
    
    </summary>
    
      <category term="Android架构" scheme="http://logan62334.github.io/categories/Android%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Android架构" scheme="http://logan62334.github.io/tags/Android%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>配置Android项目 - 一些重要的事情</title>
    <link href="http://logan62334.github.io/2017/03/20/%E9%85%8D%E7%BD%AEAndroid%E9%A1%B9%E7%9B%AE%E2%80%94%E4%B8%80%E4%BA%9B%E9%87%8D%E8%A6%81%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    <id>http://logan62334.github.io/2017/03/20/配置Android项目—一些重要的事情/</id>
    <published>2017-03-20T11:39:58.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h3><p>当你在Android Studio中创建一个新的Android项目时，它已经生成了gitignore文件，但通常它不包含所有必要的规则。</p><p>为了快速生成和下载gitignore文件，我建议您使用gitignore.io网站。只需输入必要的关键字，如 — Android，Intellij并点击生成按钮。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/33.png" alt="1"></p><blockquote><p>在模板项目中查看<a href="https://github.com/dmytrodanylyk/template/blob/master/.gitignore" target="_blank" rel="noopener"><em>gitignore</em></a>文件。</p></blockquote><h3 id="tools-folder"><a href="#tools-folder" class="headerlink" title="tools folder"></a>tools folder</h3><p>如果你有一些第三方脚本，规则集或其他与您的项目相关的文件不要只是简单的把它们放在根目录 —它会造成混乱。（特别是对于那些使用Project视图，而不是Android视图）</p><p>尝试创建一个文件夹（例如tools），并将所有这些文件放入此文件夹。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/34.png" alt="2"></p><p>通常我在那里放一些自定义的gradle脚本文件，proguard和静态代码分析工具的规则，如pmd，findbugs，lint。</p><blockquote><p>在模板项目中查看 <a href="https://github.com/dmytrodanylyk/template/tree/master/tools" target="_blank" rel="noopener">tools</a>文件夹。</p></blockquote><h3 id="flavors"><a href="#flavors" class="headerlink" title="flavors"></a>flavors</h3><p>Flavours用于创建具有不同设置的构建。在大多数情况下，我会立即设置两种flavors — dev和prod：</p><ul><li>applicationId</li><li>versionCode / versionName</li><li>server endpoints</li><li>google services keys</li><li>…</li></ul><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/35.png" alt="3"></p><blockquote><p>在模板项目中查看 <a href="https://github.com/dmytrodanylyk/template/blob/master/app/build.gradle#L33" target="_blank" rel="noopener">productFlavors</a>。</p></blockquote><h3 id="keystore"><a href="#keystore" class="headerlink" title="keystore"></a>keystore</h3><p>keystore是一个二进制文件，其中包含一个或多个用于签署应用程序的私钥。</p><p>当从IDE运行或调试项目时，Android Studio会使用Android SDK工具生成的调试证书自动为您的APK签名。</p><p>使用本地调试keystore时有几个问题：</p><ul><li>到期日365天</li><li>从多台计算机安装应用程序需要先卸载</li><li>google服务需要密钥库SHA-1指纹</li></ul><p>这就是为什么我通常生成调试密钥库并提交到版本控制系统。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/36.png" alt="4"></p><blockquote><p>在模板项目中查看 <a href="https://github.com/dmytrodanylyk/template/blob/master/app/build.gradle#L18" target="_blank" rel="noopener">signingConfigs</a>。</p></blockquote><h3 id="proguard"><a href="#proguard" class="headerlink" title="proguard"></a>proguard</h3><p>Android proguard用来做三件事：</p><ul><li>压缩未使用的代码 — 帮助你不超出64k限制</li><li>优化代码和apk</li><li>混淆代码 — 使你的APK难以做逆向工程</li></ul><p>问题是混淆和代码优化显着增加了编译时间，使调试更困难。</p><p>这就是为什么最好对发布和调试版本使用不同的proguard规则：</p><ul><li>rules-proguard.pro</li><li>rules-proguard-debug.pro</li></ul><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/37.png" alt="5"></p><p>用于调试构建的Proguard规则必须具有以下行以强制proguard忽略警告，跳过代码混淆和优化：</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/38.png" alt="6"></p><p>对于发布版本，设置proguard规则将会更加困难，因为几乎每个库都有自己的特定规则。幸运的是，有一个开源代码库 —  <a href="https://github.com/krschultz/android-proguard-snippets" target="_blank" rel="noopener"><em>android-proguard-snippets</em></a>，它包含所有主要库的proguard规则。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/39.png" alt="7"></p><blockquote><p>在模板项目中查看 <a href="https://github.com/dmytrodanylyk/template/blob/master/tools/rules-proguard.pro" target="_blank" rel="noopener">rules-proguard.pro</a>和<a href="https://github.com/dmytrodanylyk/template/blob/master/tools/rules-proguard-debug.pro" target="_blank" rel="noopener">rules-proguard-debug.pro</a>。</p></blockquote><h3 id="strict-mode"><a href="#strict-mode" class="headerlink" title="strict mode"></a>strict mode</h3><p>Android StrictMode可帮助您检测不同类型的问题：</p><ul><li>可关闭对象没关闭</li><li>在主线程中读写文件或者访问网络</li><li>uri 暴露</li><li>…</li></ul><p>每当检测到这样的问题，它可以显示适当的日志或应用程序崩溃，具体取决于你的配置。</p><p>我建议你只在调试的时候打开它并且使用detectAll方法来检测所有类型的问题。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/40.png" alt="8"></p><p>这里是当你忘记关闭SQLiteCursor的日志的例子：</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/41.png" alt="9"></p><blockquote><p>在模板代码中查看<a href="https://github.com/dmytrodanylyk/template/blob/master/app/src/main/java/com/dd/template/TemplateApplication.java#L12" target="_blank" rel="noopener">StrictMode</a>。</p></blockquote><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="全栈增长工程师，欢迎关注"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;gitignore&quot;&gt;&lt;a href=&quot;#gitignore&quot; class=&quot;headerlink&quot; title=&quot;gitignore&quot;&gt;&lt;/a&gt;gitignore&lt;/h3&gt;&lt;p&gt;当你在Android Studio中创建一个新的Android项目时，它已经生成了g
      
    
    </summary>
    
      <category term="Android架构" scheme="http://logan62334.github.io/categories/Android%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Android架构" scheme="http://logan62334.github.io/tags/Android%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Model-View-Presenter:Android指南</title>
    <link href="http://logan62334.github.io/2017/03/10/Model-View-Presenter:Android%E6%8C%87%E5%8D%97/"/>
    <id>http://logan62334.github.io/2017/03/10/Model-View-Presenter:Android指南/</id>
    <published>2017-03-10T11:39:58.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf#.nqgbpr2bj" target="_blank" rel="noopener">https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf#.nqgbpr2bj</a></p></blockquote><p>网上有很多关于MVP架构的文章和示例，并且有很多不同的实现。但开发者社区仍不断努力，想以尽可能最好的方式将此模式应用在Android上。</p><p>如果你决定采用这种模式，你正在做一个架构选择，你必须知道你的代码库将改变，以及你新的功能也要用新的方法来开发。另外你需要面对常见的Android问题如Activity生命周期，然后你还应该问问自己下面这些问题：</p><ul><li>我应该保存<em>presenter</em>的状态吗？</li><li>我应该将<em>presenter</em>做持久化处理吗？</li><li><em>presenter</em>需要有生命周期吗？</li></ul><p>在本文中，我将提供一系列准则或最佳做法，以便：</p><ul><li>解决采用这个架构遇到的最常见问题（至少是一些我遇到过的）</li><li>发挥这个架构的最大优势</li></ul><p>首先，让我们先解释一下这个模式：</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/32.png" alt="1"></p><ul><li><strong>Model</strong>：它是负责管理数据的接口。模型的职责包括使用API，缓存数据，管理数据库等。该模型还可以是与负责这些职责的其他模块通信的接口。例如，如果你使用Repository模式，则模型可以是Repository。如果你使用的是Clean架构，那么Model可以是一个Interactor。</li><li><strong>Presenter</strong>：presenter是model和view的中间人。你的所有业务逻辑都应该放在这里面。presenter负责查询model和更新view，对更新模型的用户交互作出反应。</li><li><strong>View</strong>：它只负责以presenter定义的方式来显示数据。view可以被Activities、 Fragments、任何Android widget或者其他一些像显示ProgressBar、更新TextView、填充RecyclerView等等可执行操作的视图。</li></ul><p>下面是以我的观点列出的一些指南，你可能不会全部赞同，不过我会试着解释为什么这么做。</p><h3 id="1-让View变得被动和无知"><a href="#1-让View变得被动和无知" class="headerlink" title="1. 让View变得被动和无知"></a>1. 让View变得被动和无知</h3><p>Android中最大的一个问题就是view（Activities、Fragments等）不是那么容易被测试因为Android框架很复杂。为了解决这个问题，你需要实现<a href="https://martinfowler.com/eaaDev/PassiveScreen.html" target="_blank" rel="noopener"><strong>Passive View</strong></a>模式。这种实现方式通过利用一个controller来减少view的业务行为，在我们的例子中，这个controller是presenter。这种方式显著的提高的代码的可测试性。</p><p>例如，如果你有一个username/password的表单和一个提交按钮，你不需要在view中写验证逻辑而是将它写在presenter中。你的view只管接受用户名和密码的输入然后将他们传递给presenter即可。</p><h3 id="2-使presenter与框架无关"><a href="#2-使presenter与框架无关" class="headerlink" title="2. 使presenter与框架无关"></a>2. 使presenter与框架无关</h3><p>为了提高代码的可测试性，那么就要确保presenter不能依赖Android类文件。presenter用纯java代码实现的两个理由：首先你要将具体的实现抽象到presenter中，这样的话你就可以写不依赖于设备的测试代码了（甚至都不需要<a href="http://robolectric.org/" target="_blank" rel="noopener">Robolectric</a>），可以快速的在你的本地JVM中运行而不需要模拟器。</p><blockquote><p>如果我需要用到Context呢?</p></blockquote><p>那么就不要用它。在这种情况下，你应该问一下自己为什么需要context呢。我猜你可能想要存储数据或者获取资源。但是你不需要在presenter中做这些：你可以在view中获取资源，在model中存储数据。这里只是两个简单的例子，不过我敢打赌大多数情况下都是因为类的职责不明确导致的。</p><p>顺便说一下，依赖倒置原则可以帮助你在这种情况下解耦。</p><h3 id="3-写一个contract类来描述View和Presenter之间的交互"><a href="#3-写一个contract类来描述View和Presenter之间的交互" class="headerlink" title="3. 写一个contract类来描述View和Presenter之间的交互"></a>3. 写一个contract类来描述View和Presenter之间的交互</h3><p>当你准备开始写一个新功能时，第一步最好先写一个contract类。contract描述了view和presenter之间的交互，它帮助你以更干净的方式设计交互。</p><p>我喜欢用Google在 <a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="noopener">Android Architecture</a> repository中建议的解决方案：这个contract接口类中包含两个接口一个是view另一个是presenter。</p><p>让我们举个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public interface SearchRepositoriesContract &#123;</span><br><span class="line">  interface View &#123;</span><br><span class="line">    void addResults(List&lt;Repository&gt; repos);</span><br><span class="line">    void clearResults();</span><br><span class="line">    void showContentLoading();</span><br><span class="line">    void hideContentLoading();</span><br><span class="line">    void showListLoading();</span><br><span class="line">    void hideListLoading();</span><br><span class="line">    void showContentError();</span><br><span class="line">    void hideContentError();</span><br><span class="line">    void showListError();</span><br><span class="line">    void showEmptyResultsView();</span><br><span class="line">    void hideEmptyResultsView();</span><br><span class="line">  &#125;</span><br><span class="line">  interface Presenter extends BasePresenter&lt;View&gt; &#123;</span><br><span class="line">    void load();</span><br><span class="line">    void loadMore();</span><br><span class="line">    void queryChanged(String query);</span><br><span class="line">    void repositoryClick(Repository repo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个方法的名字，你应该就明白这个例子中的contract是干什么的了吧。</p><p>如果你还不知道，那一定是你的问题哈哈。</p><p>在这个例子中你可以看到view中定义的方法非常简单而且不包含任何逻辑。</p><h4 id="The-View-contract"><a href="#The-View-contract" class="headerlink" title="The View contract"></a>The View contract</h4><p>正如我之前说过的，view接口是要被Activity或者Fragment实现的。presenter必须依赖于view接口而不是直接依赖于Activity：通过这种方式，你可以将presenter从视图实现解耦，遵循SOLID原则的D：“依赖抽象，不要依赖具体实现）。</p><p>我们不需要更改presenter中的一行代码就可以替换具体的视图。因此我们可以非常容易的通过创建一个mock view来进行单元测试。</p><h4 id="The-presenter-contract"><a href="#The-presenter-contract" class="headerlink" title="The presenter contract"></a>The presenter contract</h4><blockquote><p>等等，我们真的需要一个Presenter接口吗？</p></blockquote><p>事实上不需要，但我认为还是要的。</p><p>关于这个话题有两种不同的思想流派。</p><p>一些人认为应该写一个Presenter接口因为你要将具体的presenter和view解耦。</p><p>然而另外一些开发者认为你在抽象的东西已经是一个抽象的了所以不需要再写一个接口了。另外不管怎么样，有了一个接口后可以帮你方便的写mock presenter，不过如果你采用了<a href="http://site.mockito.org/" target="_blank" rel="noopener">Mockito</a>这样的工具类那么你就不需要接口了。</p><p>我个人还是喜欢写这么一个<strong>Presenter</strong>接口的，下面是两个简单的理由：</p><ul><li>我不是去为presenter写一个接口而是写一个Contract类来描述view和presenter之间的交互。</li><li>写这么个接口并不费什么力。</li></ul><p>我已经这么写超过一年了甚至更长，至今没有发现什么问题。</p><h3 id="4-定义一个名称方便区分责任"><a href="#4-定义一个名称方便区分责任" class="headerlink" title="4. 定义一个名称方便区分责任"></a>4. 定义一个名称方便区分责任</h3><p>presenter通常有两种类型的方法：</p><ul><li><strong>Actions</strong>（e.g: load()）：presenter的一些行为操作。</li><li><strong>User events</strong>（e.g:queryChanged(…)）：用户触发的操作比如在搜索框中键入字符或者是点击列表中的某个选项。</li></ul><p>你定义的action越多那么view中的逻辑也就越多。</p><p>当用户滚动到列表的结尾时将调用loadMore()方法，然后presenter加载另外一页的结果。这意味着当用户滚动到结尾时，view知道必须加载新页面。我可以命名方法onScrolledToEnd（）让具体的presenter处理具体做什么。</p><p>我想说的是，在“contract设计”阶段，你必须定义好每个用户事件，相应的action是什么，逻辑应该属于谁。</p><h3 id="5-不要在Presenter接口中创建Activity-lifecycle-style回调"><a href="#5-不要在Presenter接口中创建Activity-lifecycle-style回调" class="headerlink" title="5. 不要在Presenter接口中创建Activity-lifecycle-style回调"></a>5. 不要在Presenter接口中创建Activity-lifecycle-style回调</h3><p>我使用这个标题的意思是presenter不应该有像onCreate（…），onStart（），onResume（）等方法原因如下：</p><ul><li>如果这么做了的话presenter将会和Activity产生耦合。如果我想用一个Fragment替换Activity怎么办？我什么时候应该调用presenter.onCreate（state）方法？在fragment的onCreate(…)、onCreateView(…)还是onViewCreated(…)中？如果我使用自定义view怎么办？</li><li>presenter不应该有这么复杂的生命周期。事实上，主要的Android组件都是以这种方式设计的，但并不意味着你必须也这么做。如果你有机会可以简化的话那就简化它吧。</li></ul><h3 id="6-Presenter和view有1对1的关系"><a href="#6-Presenter和view有1对1的关系" class="headerlink" title="6. Presenter和view有1对1的关系"></a>6. Presenter和view有1对1的关系</h3><p>如果没有view的话presenter就没有意义了。presenter随着view一起被创建也随着view一起被销毁。一个presenter管理一个view。</p><p>你可以通过多种方式处理presenter中view的依赖。一种方式是在presenter接口中提供像attach(View view)和detach()的方法就像之前例子中展示的那样。不过这样做有一个问题就是你需要注意view是否为null，每次presenter用到它的时候都要检查一下是否为null。这点确实有点烦……</p><p>我说了presenter和view是一对一的关系。我们可以利用这一点，实际上具体的presenter可以将view实例作为构造函数的参数传入。顺便说一句，你可能需要一个方法来订阅presenter的一些事件。所以我建议定义一个方法start（）（或类似的方法）来运行Presenter中的业务。</p><blockquote><p>关于<em>detach()</em>呢？</p></blockquote><p>如果你有一个叫start（）的方法，那么你可能至少还需要一个来释放依赖的方法。既然我们定义订阅presenter一些事件的方法叫start（），那么另一个方法就叫stop（）吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface BasePresenter&lt;V&gt; &#123;</span><br><span class="line">  void attach(V view);</span><br><span class="line">  void detach();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface BasePresesnter &#123;</span><br><span class="line">  void start();</span><br><span class="line">  void stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-不要在presenter中保存状态"><a href="#7-不要在presenter中保存状态" class="headerlink" title="7. 不要在presenter中保存状态"></a>7. 不要在presenter中保存状态</h3><p>我的想着是要用Bundle来保存。但考虑到上面的第二条准则就不能这么做了。你不能将数据序列化到Bundle中，因为这样的话presenter就与Android类耦合了。</p><p>我说presenter应该是无状态的，但其实也不然。在我之前描述的例子中，presenter应该至少具有页码/偏移量之类的状态。</p><h3 id="8-不要持久化presenter"><a href="#8-不要持久化presenter" class="headerlink" title="8. 不要持久化presenter"></a>8. 不要持久化presenter</h3><p>我不喜欢这种方式主要是因为我认为presenter不是我们应该持久化的，要清楚它不是一个数据类。</p><p>一些建议提供了一种在配置发生改变的时候通过恢复fragments或者 <a href="https://medium.com/@czyrux/presenter-surviving-orientation-changes-with-loaders-6da6d86ffbbf#.ii7px6adf" target="_blank" rel="noopener">Loaders</a>的方式记住presenter的状态。我不认为这是最好的解决方案。通过这种方式presenter可以在方向发生变化恢复，但是当Android杀死了进程并销毁Activity，后者将与新的presenter一起重新创建。因此，该解决方案仅解决了一半的问题。</p><h3 id="9-为Model提供缓存以恢复视图状态"><a href="#9-为Model提供缓存以恢复视图状态" class="headerlink" title="9. 为Model提供缓存以恢复视图状态"></a>9. 为Model提供缓存以恢复视图状态</h3><p>在我看来，解决“恢复状态”问题需要一些应用架构的知识。基本上，作者建议使用类似Repository或任何旨在管理数据的接口来缓存网络结果，范围限定于应用程序而不是Activity。</p><p>这个接口只是一个更聪明的Model。后者应至少提供磁盘缓存策略和可能的内存缓存。这样的话，即使进程被杀，presenter也可以使用磁盘缓存恢复视图状态。</p><p>view应该只关心必要的请求参数以恢复状态。例如，在我们的示例中，我们只需要保存查询。</p><p>现在，你有两个选择：</p><ul><li>你在model层中抽象这个行为，当presenter调用repository.get（params）时，如果页面已经在缓存中，数据源只返回它，否则再调用API。</li><li>在contract中的presenter添加一个方法来恢复视图状态。restore（params），loadFromCache（params）或reload（params）这些是描述相同动作的不同名称你可以随便选一个。</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>以上是我对应用于Android的Model-View-Presenter架构的看法，希望通过不断的尝试可以找到最佳实践。</p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="全栈增长工程师，欢迎关注"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://medium.com/@cervonefrancesco/model-view-presenter-android-guidelines-94970b430ddf#.nqgbpr2bj&quot; target=&quot;
      
    
    </summary>
    
      <category term="Android架构" scheme="http://logan62334.github.io/categories/Android%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Android架构" scheme="http://logan62334.github.io/tags/Android%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>和无序说再见</title>
    <link href="http://logan62334.github.io/2016/10/13/%E5%92%8C%E6%97%A0%E5%BA%8F%E8%AF%B4%E5%86%8D%E8%A7%81/"/>
    <id>http://logan62334.github.io/2016/10/13/和无序说再见/</id>
    <published>2016-10-13T09:39:58.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/logan62334/ImageArchive/raw/master/life/2.jpg" alt></p><blockquote><p>不要给信息归档，用的时候搜索就行了</p></blockquote><p>先来看看我们日常工作生活中经常会做的文件整理吧。为了让生活更有序，因此我们都学会了如何让资料文件归档。毫无疑问，这样做是有意义的。如果不能按照某种符合逻辑的方式存放自己收到的文件或者信函，那么当你查找需要用到的东西时，就得到处翻检。而往往我们都会通过文件柜的形式去完成这样的事情（特别是传统行业的从业者）。</p><p>但是，使用这种文件柜的组织模式既没有考虑我们大脑的自身限制，也没有充分利用科学技术的新发展。</p><p>举例来说，公司在入职的时候给你发了一份关于费用报销及各项福利的说明文件。等你下次需要用到的时候就可以参考这些规定执行，以便填写正确的报销单据或者申请享受应有的福利。可是如果下次用到是几个月以后的事，你会怎么办？在此期间，你该怎么归档这份跨部门的文件呢？</p><p>在这个问题上，大部分人的做法可能会如出一辙。你极有可能会把这个说明文件装进一个文件夹，贴上写有“福利待遇”之类字样的便签然后放进专门存放公司文件的抽屉中，可是，你怎么记得这个抽屉就是存放公司福利政策文件的地方？</p><p>或许你也可能把相应的电子文档放到个人电脑的某个磁盘的目录下。即便如此，还是会有同样的问题：以后你能记得自己把这份文件放在这个目录下了吗？</p><p>也许你会未雨绸缪，以防忘记这份文件放在哪，而把它复制（复印）好多份放在不同的目录下（不同的抽屉中），例如：桌面也放一份。尽管需要执行多次文档归类的操作，而且也会多占用几个字节的磁盘空间（加剧森林的砍伐），不过这种策略短期来看还是行之有效的。</p><p>时至今日，“云”已经开始变得像自来水一样慢慢的走进了大众的生活，诸如电子邮件、电子日历、文件备份、资料共享、云盘之类的服务都属于云计算的范畴。人们不必要把信息存放在个人电脑的固定硬盘或者移动存储设备上，而是可以利用上面的诸多服务，在互联网上存放所有的信息。这意味着你可以在任何一台联网的计算机或者其他设备（比如装有浏览器的手机、PAD）上访问和使用自己的信息。你的信息存放在一个地方而你可以通过很多种方式获取它，这样的话，即便你的电脑磁盘损坏或者手机中毒导致文件不可用，你也不用担心自己的数据会丢失。</p><p>只要能联网，你就可以使用绝大多数的云服务。在这些海量云服务中，我个人比较喜欢的是Google的免费Gmail、Google Drive（有15G空间）、Google Doc、Google Photo（可以上传无限张压缩无损照片）。</p><p>回到上面的例子，你完全可以把这份文件通过Gmail发给自己或者上传到Google Drive。这样的话，在你需要的时候只需要在Gmail或者Google Drive中搜索一下即可。另外如果你使用的是mac，那么你就没有必要把一份文件到处复制保存了，你可以在需要的时候调出spotlight键入关键字就可以迅速找到本机中的相应文档了。</p><p>这就是搜索的美妙之处，它花费的时间大概还不及你把椅子转向抽屉的时间长。即使这份文件没有电子版也没关系，你可以扫描后存放在自己的电脑或者互联网上，等需要的时候再去搜索。</p><p>就在刚刚我要查看我的公积金账户，但是距离上一次使用已经过去快半年了，账号早已经忘记了，而且我也没有专门记录，于是我通过手机的邮箱客户端在搜索框中键入公积金三个字，在主题那个搜索结果列表中找到了当初公司发给我的公积金账户信息（太方便了！）。</p><p>借助搜索功能，你再也不必像过去那样，费劲心思想要把自己的信息资料存放的“井井有条”了。这就好比你再也不用一件一件地把所有衣服都挂好一样。相反，你只要把衣服扔到那个越来越高的大堆上就行。等你想穿那件印有ZERO TO ONE的T恤时，直接提出要求，那件衣服就像变魔术般的出现在了你的面前。这是多么轻松自由的感觉啊！（这也会减少磁盘空间的浪费你只需要128G的Mac和16G的iphone就行了甚至移动存储设备都可以被抛弃另外也可以把森林砍伐的风险降到最小）</p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="全栈增长工程师，欢迎关注"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/logan62334/ImageArchive/raw/master/life/2.jpg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要给信息归档，用的时候搜索就行了&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
      <category term="生活随笔" scheme="http://logan62334.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活随笔" scheme="http://logan62334.github.io/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>说说 Growth Hacker</title>
    <link href="http://logan62334.github.io/2016/09/29/%E8%AF%B4%E8%AF%B4%20Growth%20Hacker/"/>
    <id>http://logan62334.github.io/2016/09/29/说说 Growth Hacker/</id>
    <published>2016-09-29T12:39:58.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/31.png" alt><br><em>大家应该注意到我的公众号改名了哈，今天就来随便聊聊我对”增长黑客”的认识。</em></p><p>最开始接触“增长黑客”（Growth Hacker）这个概念是源自一则关于Hotmail的营销事件。</p><p>1996年刚刚成立不久的Hotmail由于手头资金有限，他们仅靠在每一封用Hotmail发出的邮件末尾加上“我爱你，快来Hotmail申请你的免费邮箱。”这样一句简单的话，就给他们带来了每天3000个新用户的增长。</p><p>那么话说回来，到底什么才是“增长黑客”呢？</p><p>在互联网公司中，增长黑客是游走在产品、运营、研发、设计、用研等环节之间的多面手。他们的唯一目标就是通过严谨的数据分析以最低的成本获得高用户增长。</p><p>那有人可能要问了，怎么才能成为一名增长黑客呢？其实不管现在你是拥有技术背景的产品经理，还是对产品运营感兴趣的研发工程师都有相对的优势，不过归根结底还是要专业技能过硬、经得起实战检验，才是最基本的准入门槛。</p><p>增长黑客要建立”T“型的知识结构——在横向上对跨界知识信手拈来、有机整合，在纵向上有某一领域的专攻，甚至达到旁人难以企及的深度。</p><p>就我的个人成长经验来说，由于从小就对黑客和互联网感兴趣，自从高一拥有了自己的第一台个人电脑之后便开始折腾各种操作系统和软件，随后通过frontpage搭建了自己的第一个静态博客，大学期间小打小闹的也创过业，在2012年的暑假第一次接触到Android开发，然后闭关苦学3个月给学校开发出了一款移动图书馆APP，并且成功在360手机助手和腾讯应用宝以及图书馆主页上线。由于本科学的是网络工程，因此在网络编程、黑客攻防、路由交换等方面也得到一些专业技能的加强。此外因为兴趣比较广泛，学过设计用的PS、运营用的公众号、数据分析用的GA、产品用的Axure等等。业余时间也喜欢写写博客，从CSDN免费博客到WordPress搭的动态博客再到现在的Hexo静态博客，慢慢也学到了一些排版和布局的文案技巧，毕业后的第一份工作加入了一家初创团队因此也有幸结实了一些优秀的产品经理、创业达人和投资人。</p><p>总的来说，一路野蛮生长，跌跌撞撞，体内吸收了不少“混乱”的能量。然而那些在当初看来任性妄为、无足轻重的经历，终将在某一日连点成线，开花结果。正如乔布斯在斯坦福毕业典礼上的演讲：“你不可能从现在预测到未来，只有回头看时，才会发现事物之间的联系。所以你必须相信，那些生命中的点点滴滴，将会在你未来的生命里，以某种方式串联起来。你必须始终相信一些东西——你的勇气、宿命、生活、因缘、随便什么，它们将给你追寻内心真正所想的自信，带你走离平凡，变得与众不同。”</p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="全栈增长工程师，欢迎关注"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/logan62334/ImageArchive/raw/master/Android/31.png&quot; alt&gt;&lt;br&gt;&lt;em&gt;大家应该注意到我的公众号改名了哈，今天就来随便聊聊我对”增长黑客”的认识。&lt;/em&gt;&lt;/p
      
    
    </summary>
    
      <category term="增长黑客" scheme="http://logan62334.github.io/categories/%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2/"/>
    
    
      <category term="增长黑客" scheme="http://logan62334.github.io/tags/%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>你有没有这些衣物？</title>
    <link href="http://logan62334.github.io/2016/08/28/%E4%BD%A0%E6%9C%89%E6%B2%A1%E6%9C%89%E8%BF%99%E4%BA%9B%E8%A1%A3%E7%89%A9%EF%BC%9F/"/>
    <id>http://logan62334.github.io/2016/08/28/你有没有这些衣物？/</id>
    <published>2016-08-28T17:39:58.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/logan62334/ImageArchive/raw/master/life/1.JPG" alt><br>最近感觉公号总写些技术类的文章不免有些枯燥，今天就开篇讲讲生活上一些值得思考的小事吧。</p><p><strong>你的衣橱里有没有这些衣物？</strong></p><p>拿我自己来说，其实一直到高中毕业前我的大部分衣服、鞋子都是我母亲一手操办购买的，每次她买完回来让我试穿一下，如果尺码没什么问题我基本都会说OK的（可能当时我也确实没什么审美）。<em>**</em></p><p>久而久之，每逢过年准备购置新衣服的时候就会发现还有一大堆的旧衣服静静的躺在衣橱内甚至有些压根都没有穿出去过。这个时候我大都会跟母亲说要不咱们扔掉一些吧反正留着也没用，可你们应该是知道的父母那辈人总是以节俭自居，So…</p><p>反观我大学期间，很多时候不管是因为网购便宜还是和周围人攀比，还是会有各种各样的无用消费（这里不单单是衣物还有各种电子消费品等）。</p><p><strong>要重视价值而非价钱</strong></p><p><em>买便宜货不是明智之举。</em>大学头一两年因为花的是家里的钱所以比较省，有时候会在像双十一这样的大型网购节的时候一口气买好些便宜可质感差的衣服。数量再多，经常穿的也就那几件，其他依然是闲置。</p><p><em>花大价钱也不是长久之计。</em>一个人的形象好不好，不是靠几个奢侈品就能改变的。这让我想起了之前看到的一篇文章《为什么法国女人不买名牌包？》，文中讲了其实她们并不是买不起那一个包，她们是买不起和那个包等值的全套东西。不想打肿脸，硬塞进那个不属于她们的阶级。有什么比背着香奈儿的包，去挤地铁更让人心酸的事情呢？时尚是用钱砸出来的，可也得看砸在了什么地方。如果说服饰能推动你的人生顺丰顺水，那才值得投资。</p><p><strong>定期整理下衣物，该扔就扔</strong></p><p>这些年，我基本定期就会收拾一次家，每次都能扔掉一大箱子的东西，其中衣物居多其次是些电子产品之类的。说实话每次扔完心情就会特别好，感觉世界又清爽了好多，我扔东西的原则是：近一年没穿过的衣服鞋子、未来半年不会再用到的生活用品、功能重复的电子产品还有好多失去收藏意义的摆件。</p><p>说到扔东西，我们真的还会去穿那些一年都没有碰过的衣服嘛？</p><p>不。</p><p>很多人压根就再也不会去穿了，每次从一个储物箱挪到另一个，但有人心里可能就想了在衣橱里多放一两件衣服又不是什么大事万一哪天用的到呢，至少它还在那儿，不是么？</p><p>一两件这样的衣服的确不是问题，但是如果抱定这样的想法，年复一年，怕是衣橱里已经堆满了太多无用的衣服，反而是那些真正有用的没有搁置的地方了。</p><p>关于是否要留下这些衣服，这种想法明确地把人分为不同的两群。</p><p><strong>觉得需要留下的人</strong>，心心念念在自己得到的东西上，生怕有任何损失，我们可以把这种心态下的人生称之为“存量人生”。</p><p><strong>而觉得不需要留下的人</strong>，他们努力探寻这个世界的真实，用理性控制自己的情绪，小心翼翼地和万兽群奔保持距离。他们的想法是审慎地分析评估真正对自己有用的东西，目的是带上最少的负担和给养，好继续向前飞奔，可以把这种心态下的人生称之为“增量人生”。</p><p><strong>不同的人生态度会带来不同的结果</strong></p><p>和所谓关键处的几次选择相比，在某种人生态度下日复一日的践行，对人生的决定性作用可能更大。追求存量者到最后往往两手空空，追求增量者很可能不求自得。从更长的时间尺度上来看，在出发点上的毫厘之差，也许会在其后拉开惊人的距离。</p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/logan62334/ImageArchive/raw/master/life/1.JPG&quot; alt&gt;&lt;br&gt;最近感觉公号总写些技术类的文章不免有些枯燥，今天就开篇讲讲生活上一些值得思考的小事吧。&lt;/p&gt;
&lt;p&gt;&lt;s
      
    
    </summary>
    
      <category term="生活随笔" scheme="http://logan62334.github.io/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活随笔" scheme="http://logan62334.github.io/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>静态网站的动态化</title>
    <link href="http://logan62334.github.io/2016/08/26/%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%9A%84%E5%8A%A8%E6%80%81%E5%8C%96/"/>
    <id>http://logan62334.github.io/2016/08/26/静态网站的动态化/</id>
    <published>2016-08-26T12:39:58.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说到静态网站的动态化，其实就跟想减肥又不愿多运动一个道理，那到底鱼和熊掌能不能兼得呢？静态网站确实有诸多优点但它的部署发布流程太繁琐了，之前我为了偷懒写了一个脚本每次写完文章一键发布！</p></blockquote><p>后来在一次team分享会上cc同学提出了一个小创意说现在静态网站+markdown的组合非常流行，我们可不可以做一个移动版的app随时把写好的文章以静态网站的形式发布出去？而且兴致勃勃的说目前没有人这么做如果做出来肯定会火一把😄 。</p><p>最近在看持续集成相关的文章，然后发现完全可以通过CI+静态网站生成器+github手机客户端完成之前的idea，于是google了一下发现很多文章都有讲如何通过Travis、flow.ic等持续集成工具来发布由hexo、Jekyll等等静态网站生成器构建的博客，这仿佛也印证了那句话“当你想到一个idea的时候，可能有1000个人已经想到了，100个人在计划了，10个人准备全力去做了，一个人已经干出来了” 不过关键还是看执行力。</p><p>既然网上很多文章都有讲为什么还要来写这篇文章呢？还不是因为各种坑嘛，在实际搭建部署的过程中遇到各种莫名的环境配置问题，思路大家都懂😂</p><p>关于持续集成和静态网站生成器之类的概念在这里就不重复讲了，有问题自行google。</p><p><strong>我的博客框架</strong></p><hr><p>我的博客系统是用Hexo+Travis CI+Github搭建的。<br>因为要使用Gitpage服务，所以生成的网页文件必须是在master分支</p><ul><li>master分支用来存放生成的Html文件</li></ul><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/23.png" alt></p><ul><li>blog_source分支用来存放博客源文件</li></ul><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/24.png" alt></p><p><strong>在Github上生成Access Token</strong></p><hr><p>在github的设置页面，点击左侧的Personal access tokens，然后点击右上角的Generate new token按钮，他会让你输入密码，最后进入下图的页面：</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/25.png" alt></p><p>这里需要注意因为你要把这个token给CI服务器所以为了安全起见尽量只给必要的权限即可。</p><p><strong>Travis CI的环境配置</strong></p><hr><p>这里我们把一些敏感的信息都配置在CI服务器上，例如：github的用户名、邮箱、Gitpage的地址、还有刚刚生成的Token。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/26.png" alt></p><p><strong>.travis.yml的配置</strong></p><hr><p>这里我们还需要在存放博客源码的仓库里创建一个.travis.yml配置文件，如下图：</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/27.png" alt></p><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js: stable</span><br><span class="line"></span><br><span class="line"># S: Build Lifecycle</span><br><span class="line">install:</span><br><span class="line">  - npm install</span><br><span class="line">  - npm install -S hexo-generator-json-content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#before_script:</span><br><span class="line"> # - npm install -g gulp</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hexo g</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">  - cd ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name &quot;$&#123;USER_NAME&#125;&quot;</span><br><span class="line">  - git config user.email &quot;$&#123;EMAIL&#125;&quot;</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m &quot;Update docs&quot;</span><br><span class="line">  - git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br><span class="line"># E: Build LifeCycle</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - blog_source</span><br></pre></td></tr></table></figure><p>其中变量的含义：</p><ul><li>GH_TOKEN——访问github的token</li><li>GH_REF——博客托管在Gitpage上的地址</li><li>USER_NAME——github的用户名</li><li>EMAIL——github的邮箱</li></ul><p><strong>愉快的发布文章</strong></p><hr><p><strong>1、通过Android studio来管理发布博客</strong><br>在AS中有很多不错的插件来支持markdown，这样我们就可以像平时写代码一样来写文章了，完成之后push到服务器，CI那边就会自动编译发布。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/29.png" alt></p><p><strong>2、通过github网站直接发布文章</strong><br>这种方式就更不依赖环境了，只要有一台可以联网的设备你就可以开心的写文章了。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/30.png" alt></p><p><strong>3、通过github手机客户端</strong><br>github推出了Android版的客户端，这样写文章是不是更容易了呢</p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;说到静态网站的动态化，其实就跟想减肥又不愿多运动一个道理，那到底鱼和熊掌能不能兼得呢？静态网站确实有诸多优点但它的部署发布流程太繁琐了，之前我为了偷懒写了一个脚本每次写完文章一键发布！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后来在一次team分
      
    
    </summary>
    
      <category term="CI" scheme="http://logan62334.github.io/categories/CI/"/>
    
    
      <category term="CI" scheme="http://logan62334.github.io/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>[译文] 我不使用Android Data Binding的四个理由</title>
    <link href="http://logan62334.github.io/2016/08/14/%E8%AF%91%E6%96%87-%E6%88%91%E4%B8%8D%E4%BD%BF%E7%94%A8Android-Data-Binding%E7%9A%84%E5%9B%9B%E4%B8%AA%E7%90%86%E7%94%B1/"/>
    <id>http://logan62334.github.io/2016/08/14/译文-我不使用Android-Data-Binding的四个理由/</id>
    <published>2016-08-14T19:06:56.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<p>为什么我还在用ButterKnife。</p><blockquote><p>免责声明：本文是基于个人经验和实践可以随意反驳，是否采纳自行决定。</p></blockquote><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/22.png" alt></p><p><strong>1、专家不建议这么做</strong><br>ButterKnife的作者Jake在下面这个github issue中直指要点。</p><blockquote><p>data binding在最简单的场景下是比较有用的。但它并没有什么创新，所以在复杂度增加的情况下还是会像其他平台上的解决方案一样用起来非常痛苦（例如：XAML）。当这个库扩展到高级的情况下，将会迫使你把绑定的逻辑写到代码中，那里才是它真正该在的地方。</p></blockquote><p>事实上，我同意其中的两点：</p><p>1、它的扩展性并不好。<br>2、业务逻辑应该在代码中。</p><p><strong>2、它让你写出意大利面式的代码</strong><br>一旦我们开始实现复杂的布局，将会使我们的Data Binding解决方案越来越复杂。</p><p>首先我们将会面临下面的问题：</p><p>1、Layout 要求你给他们分别传递数据。</p><p>2、你也可能想为你的布局创建不同的数据源。</p><p>3、同样的问题也会在ViewStubs中发生。</p><p>4、当你使用Picasso加载图片的时候，你需要为他实现一个自定义的data binding adapter，那样的话你就不能作为依赖mock和注入了。</p><p>我们可能会试着做些更复杂的事情：</p><p>1、在layout中增加presentation的逻辑。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">   android:text=&quot;@&#123;user.lastName&#125;&quot;</span><br><span class="line">   android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">   android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">   android:visibility=&quot;@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>2、在listeners中增加Lambda表达式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:onLongClick=&quot;@&#123;(theView) -&gt; presenter.onLongClick(theView, task)&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>3、在layouts中使用导入的class类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;data&gt;</span><br><span class="line">    &lt;import type=&quot;android.view.View&quot;/&gt;</span><br><span class="line">&lt;/data&gt;</span><br></pre></td></tr></table></figure></p><p>我们的逻辑一部分在代码中一部分在布局文件中，这将很快变成一个噩梦，并且闻起来像是意大利面式的代码。</p><p><strong>3、单元测试也不能用了</strong><br>我非常喜欢Robolectric和Mockito，他们节约了我很多时间在创建和运行测试实例的时候，没有了他们我将无法工作。</p><p>Data Binding的一个特性对于我来说是一个bug：如果layout发生了异步更新，那就意味着在我设置了绑定之后单元测试中我无法确定view上的数据是否正确。</p><p>我记得google用Espresso实现的测试框架，但如果有可能的话我还是希望用单元测试的方式来测UI。我喜欢将Activities、Fragments和Views分开来测试而不是在一个大的Instrumentation Test中导入他们。</p><p><strong>4、它比ButterKnife提供的功能少很多</strong><br>ButterKnife提供了很多不错的特性，可能有些我们都不记得了：</p><p>1、资源绑定</p><p>2、View 列表</p><p>3、多个监听器的绑定</p><p>当我们用自定义控件做一些高级的实现的时候，资源绑定是非常有用的，我们可以通过它获取到Dimensions和Drawables。</p><p>当我们有一系列的视图触发同样的操作的时候，多视图绑定和多监听器绑定会让我们少写很多代码，例如：一系列的EditText和Buttons。</p><p>而如果你使用Data Binding库将得不到这些功能。</p><p><strong>为什么你会使用Data Binding</strong></p><p><strong>1、我可以开发的更快</strong><br>长远来看，快速并不一定总是好的。当我们开发app的时候，我们是在跑一场马拉松而不是一次百米冲刺……不是吗？</p><p><strong>2、它已经存在于系统sdk中</strong><br>不需要引入第三方库总归是好事情。如果你被调入到一个已经出现了方法数快超过限制的项目中时，你的leader将不希望你再引入过多的第三方库。</p><p><strong>3、我在遵循MVVM的模式</strong><br>如果你正确的利用观察者模式实现了MVVM，Data Binding库将会帮助你在views中实现观察者模式。</p><p>谢谢你看了这么长时间！</p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为什么我还在用ButterKnife。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;免责声明：本文是基于个人经验和实践可以随意反驳，是否采纳自行决定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/logan62334/Im
      
    
    </summary>
    
      <category term="Android译文" scheme="http://logan62334.github.io/categories/Android%E8%AF%91%E6%96%87/"/>
    
    
      <category term="Android译文" scheme="http://logan62334.github.io/tags/Android%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>[译文] Android开发最佳实践</title>
    <link href="http://logan62334.github.io/2016/08/06/%E8%AF%91%E6%96%87-Android%E5%BC%80%E5%8F%91%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://logan62334.github.io/2016/08/06/译文-Android开发最佳实践/</id>
    <published>2016-08-06T10:53:33.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你的软件开发效率不仅仅取决于你有多么深的知识和经验，还依赖于你的开发工具、环境配置和团队协作能力。</p></blockquote><p>我最近在 <a href="http://droidcon.de/en/sessions/effective-android-development" target="_blank" rel="noopener">Droidcon Berlin</a>做了一个关于在我们Zalando Tech team的一个Android开发者最佳实践的分享。接下来你可以找到我演讲中的一些要点，将使你的开发生活更加愉快并且让你的应用更加稳定。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/21.jpeg" alt></p><h4 id="1、你的AndroidManifest文件真实的样子是什么"><a href="#1、你的AndroidManifest文件真实的样子是什么" class="headerlink" title="1、你的AndroidManifest文件真实的样子是什么"></a>1、你的AndroidManifest文件真实的样子是什么</h4><p>我们大多数人早已知道我们在文本编辑器中看到的<em>AndroidManifest.xml</em> 文件跟实际编译好生成的的内容并不一样。这主要是因为你在工程中包含的第三方库中存在额外的&lt;<em>uses-permission/</em>&gt;标签，将和你自己的manifest文件混合。（<a href="https://commonsware.com/blog/2015/06/25/hey-where-did-these-permissions-come-from.html" target="_blank" rel="noopener">The Commons Blog</a>查看更详细的信息）</p><p>在构建APK前检查你的manifest，我们可以用Android Studio 2.2中提供的新特性：<a href="http://android-developers.blogspot.de/2016/05/android-studio-22-preview-new-ui.html" target="_blank" rel="noopener">Merged Manifest Viewer</a>。这个工具将会给你展示你的AndroidManifest是如何基于build types, flavors, and variants这些配置和你的依赖包merge的。你可以导航到<em>AndroidManifest.xml</em>文件点击底部的Merged Manifest标签使用这个工具。</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/19.png" alt></p><h4 id="2、Support-annotations是你的朋友"><a href="#2、Support-annotations是你的朋友" class="headerlink" title="2、Support annotations是你的朋友"></a>2、Support annotations是你的朋友</h4><p>另外一个特别有用的工具是support annotations library。你可以通过在你的build.gradle文件中添加“<em>com.android.support:support-annotations:23.4.0</em>” 来包含入你的工程。使用这些metadata annotations去修饰你的代码帮助你发现bug定义编码规则。最常规的使用场景是标记nullable和non-nullable，链接资源，并且指定从哪个线程被回调。</p><p>既然这些annotations是metadata annotations，所以即使你违反了它定义的语法规则你的工程也会编译。然而它会被Android Studio 和 Lint标记为高亮，并且在你的持续集成工具输出中对你的团队成员是可见的。</p><h4 id="3、快速、无痛的code-review"><a href="#3、快速、无痛的code-review" class="headerlink" title="3、快速、无痛的code review"></a>3、快速、无痛的code review</h4><p>假设你想要去做一个code review，检查开发feature是如何工作的是有意义的，所以你需要去编译你的工程。这种情况有下面这样的一种通用工作流：</p><p>1.在你当前分支Stash changes<br>2.Checkout branch来做review<br>3.在你的IDE中重新加载gradle配置<br>4.在IDE中读代码<br>5.编译启动并且测试app<br>6.重复 (1) — (5)的动作</p><p>“这里有什么问题吗？”你会问。是的，除了下面这种情况之外没什么问题，当你的工程有1000+的类和配置文件不同的时候你将会用你强劲的MacBook花超过三分钟用在编译你的代码上。</p><p>我们的解决方案是使用一个专用的IDE实例和存储库文件夹来做code review。在这种情况下你的工作在一段时间内不会停止，你可以在任何时候回到你的主IDE和分支。这里有个小的免责声明：我们建议你使用一台至少有16GB RAM的机器，它为你节省的时间绝对非常值。</p><h4 id="4、快速的应用修改"><a href="#4、快速的应用修改" class="headerlink" title="4、快速的应用修改"></a>4、快速的应用修改</h4><p>即使你的工程很小，你会经常花时间在编译部署最新的变化到测试机和模拟器上。如果你有上百个类和xml文件，每次编译和部署会花去你很多时间，即使你用配置很高的电脑。此外，你需要手动定位到应用变化的地方，这也需要一些时间。</p><p>在2015年底，Android社区收到两个可以让代码变化应用得更快的工具。第一个是<a href="https://zeroturnaround.com/software/jrebel-for-android/" target="_blank" rel="noopener">JRebel</a>，它是来自Java后端世界并且已经成为很长一段时间的行业标准。另外一个工具便是google在Android Studio 2.0中发布的<a href="https://developer.android.com/studio/run/index.html#instant-run" target="_blank" rel="noopener">Instant Run</a>，这些工具都有共同的目的，但是JRebel有更多的特性，并且需要按年支付许可证。</p><p>这两个工具单看看不出有什么不同，于是我们通过文档和一些博客分析了他们的不同：</p><p><img src="https://github.com/logan62334/ImageArchive/raw/master/Android/20.png" alt></p><p>来源：<br><a href="https://developer.android.com/studio/run/index.html" target="_blank" rel="noopener">https://developer.android.com/studio/run/index.html#instant-run</a><br><em>Reto Meier:</em> <a href="https://goo.gl/mEP7N5" target="_blank" rel="noopener">“Instant Run: How Does it Work?!”</a><br><em>Oleg Selajev:</em> <a href="https://goo.gl/NvFHpN" target="_blank" rel="noopener">“Looking at JRebel for Android and Instant Run …”</a></p><p>几乎每周这两个工具都在积极的开发和改进。根据我们的经验，虽然很多用例还没有涉及，但你已经可以受益于这些工具了。</p><h4 id="5、衡量执行时间"><a href="#5、衡量执行时间" class="headerlink" title="5、衡量执行时间"></a>5、衡量执行时间</h4><p>另一个非常有用的特性是在应用程序调试和性能分析日志记录方法输入/输出和执行时间。对于这些需求，我们使用一个简单的和优雅的方法注释工具——Hugo by Jake Wharton。如果你仅仅只是想看日志输出并不需要像Systrace这样深度和复杂的工具。</p><p>你需要做的只是去标注目标方法，如图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@DebugLog</span><br><span class="line">public String getName(String first, String last) &#123;/* ... */&#125;</span><br></pre></td></tr></table></figure></p><p>在日志中找到相应的方法调用的打印信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">V/Example: --&gt; getName(first=&quot;Jake&quot;, last=&quot;Wharton&quot;)</span><br><span class="line">V/Example: &lt;-- getName [16ms] = &quot;Jake Wharton&quot;</span><br></pre></td></tr></table></figure></p><h4 id="6、如何从你的设备上读取日志输出信息"><a href="#6、如何从你的设备上读取日志输出信息" class="headerlink" title="6、如何从你的设备上读取日志输出信息"></a>6、如何从你的设备上读取日志输出信息</h4><p>为了日常的需要，我们大多数人使用Android Studio内置的Monitor来读取日志。在简单的场景下它使用很方便，但我们注意到几个权衡使用这种方法:</p><p>1.日志是难以阅读,你应该使用外部工具或格式化配置。</p><p>2.Android Studio的日志工具是和你部署的应用程序的进程ID关联的。如果你重新部署应用程序或杀死进程,你以前的日志都会丢失,因为Android Studio是跟进程ID绑定的。</p><p>为了解决这个问题我们可以使用Jake Wharton — <a href="https://github.com/JakeWharton/pidcat" target="_blank" rel="noopener">pidcat</a>。它的主要好处如下：</p><p>1.好颜色模式和格式。</p><p>2.由包名称连接到调试应用程序,而不是进程ID。所有的日志都将被保持在重新部署应用程序后。</p><h4 id="7、网络输出日志记录和分析"><a href="#7、网络输出日志记录和分析" class="headerlink" title="7、网络输出日志记录和分析"></a>7、网络输出日志记录和分析</h4><p>最常见的阅读你应用网路交互日志输出的方式是通过HTTP客户端。然而,这种方法有几个权衡:</p><p>1.如果你要在开发过程中保持所有的网络请求日志，你将注意到,应用程序的性能有所下降,需要一些时间来打印日志。</p><p>2.如果你的应用有一些额外的库需要用到网络，（例如：Google Analytics）你需要为这些额外的库做一些配置  来让所有的数据被记录。</p><p>这里有另外一种方法：使用HTTP监控软件 <a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles Proxy</a>，这种类型的工具会提供如下的功能，把你的应用包装为黑盒：</p><p>1.HTTP/HTTPS通道的监控和记录</p><p>2.重新修改返回值和服务器响应的边界情况</p><p>3.在网络回调的地方打断点</p><p>4.将SSL证书安装到设备读取加密流量</p><p>更新，评论中<em> </em><a href="https://medium.com/u/8bb3d456205a" target="_blank" rel="noopener"><em>Nahuel Barrios</em></a>提到的另外一个可以替代的网络监控工具是<em> </em><a href="http://facebook.github.io/stetho/" target="_blank" rel="noopener"><em>Facebook Stetho</em></a>我们仍然不能通过<em>Stetho</em>读取<em>Google Analytics</em>中的SSL加密的通信信息，如果你知道任何关于这个的信息请联系我。</p><h4 id="8、保证在不同版本的操作系统上测试"><a href="#8、保证在不同版本的操作系统上测试" class="headerlink" title="8、保证在不同版本的操作系统上测试"></a>8、保证在不同版本的操作系统上测试</h4><p>我一直在做并且推动我同事做的事情是在Lollipop和更高的(API 21+)的版本中测试每一个功能。这样我可以在测试期间捕获这些bug。</p><p>你会发现通常的兼容问题都是些触摸反馈和系统颜色的不一致，我们经常看到app由于兼容问题在老的API中崩溃。</p><h4 id="9、自动化屏幕交互测试"><a href="#9、自动化屏幕交互测试" class="headerlink" title="9、自动化屏幕交互测试"></a>9、自动化屏幕交互测试</h4><p>我们经常需要检查一些场景在不同设备上做重复的UI点击和输入。如果你有三到四台测试设备那将是非常烦人的，你需要一个回归测试计划去测试通过30各场景。</p><p>自动化的第一步，我们通过输入adb命令或者脚本去实现从而避免每次都要手动和设备交互。你可以通过系统按键、键盘输入和屏幕触控来实现adb命令的输入。</p><p>但是如果你有三台设备要同时测试一个场景，你会怎么做？我们可以使用<a href="https://github.com/romannurik/env/blob/master/bin/ninja-adb" target="_blank" rel="noopener">adb-ninja</a>来让不同设备同时测试。</p><h4 id="10、检查你的build-gradle配置"><a href="#10、检查你的build-gradle配置" class="headerlink" title="10、检查你的build.gradle配置"></a>10、检查你的build.gradle配置</h4><p>有时甚至一些有经验的开发者也会使用一些过时的配置实践。让我们检查一下你的build.gradle文件，看看你有没有中招：</p><p>1.舍弃mavenCentral，去用jcenter作为依赖仓库。jcenter拥有更快的响应时间并且已经集成了mavenCental的内容。</p><p>2.检查<em>Android Plugin for Gradle</em>的版本，保持最新的版本可以提高编译性能并且会得到像Instant Run这样好用的功能。</p><p>3.不要指定依赖库的版本范围，要使用像“23.4.0”这样的版本常量，减少每次编译依赖库时的网络请求。</p><p>4.设置编译版本minSdkVersion 21或者更高，将会提高构建速度。</p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;你的软件开发效率不仅仅取决于你有多么深的知识和经验，还依赖于你的开发工具、环境配置和团队协作能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我最近在 &lt;a href=&quot;http://droidcon.de/en/sessions/effectiv
      
    
    </summary>
    
      <category term="Android译文" scheme="http://logan62334.github.io/categories/Android%E8%AF%91%E6%96%87/"/>
    
    
      <category term="Android译文" scheme="http://logan62334.github.io/tags/Android%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>[译文] 如何正确在闪屏页加载耗时的库</title>
    <link href="http://logan62334.github.io/2016/07/27/%E8%AF%91%E6%96%87-%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%9C%A8%E9%97%AA%E5%B1%8F%E9%A1%B5%E5%8A%A0%E8%BD%BD%E8%80%97%E6%97%B6%E7%9A%84%E5%BA%93/"/>
    <id>http://logan62334.github.io/2016/07/27/译文-如何正确在闪屏页加载耗时的库/</id>
    <published>2016-07-27T21:30:47.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在这篇文章中我想展示的是当开发人员有一个初始化很慢的库时可能不希望在主线程中来初始化这个库，因为它将阻塞UI线程使应用无响应。相反，开发人员希望在后台加载它，然后将结果通知到主线程中。</p></blockquote><h4 id="闪屏页"><a href="#闪屏页" class="headerlink" title="闪屏页"></a>闪屏页</h4><p>首先，如果你已经有一些初始化的东西在自己定义的application中，你可能需要一个适当的闪屏页。这意味着当点击应用程序图标的同时应该出现闪屏页。它可以很容易通过设置SplashActivity的主题背景实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;SplashTheme&quot; parent=&quot;Theme.AppCompat.NoActionBar&quot;&gt;</span><br><span class="line">  &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/background_splash&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在你的AndroidManifest.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">  android:name=&quot;.splash.SplashActivity&quot;</span><br><span class="line">  android:theme=&quot;@style/SplashTheme&quot;&gt;</span><br><span class="line">  &lt;intent-filter&gt;</span><br><span class="line">    &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</span><br><span class="line">    &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</span><br><span class="line">  &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure><p>通常闪屏页是一个logo，所以这个@drawable/background_splash可以是一个layer-list，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">  &lt;item android:drawable=&quot;@android:color/holo_blue_dark&quot;/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;item&gt;</span><br><span class="line">    &lt;bitmap</span><br><span class="line">      android:gravity=&quot;center&quot;</span><br><span class="line">      android:src=&quot;@drawable/ic_hockey_stick&quot;/&gt;</span><br><span class="line">  &lt;/item&gt;</span><br><span class="line">&lt;/layer-list&gt;</span><br></pre></td></tr></table></figure><p>关于这个的实现就到这里。</p><p>顺便说一句，如果你使用<vector>作为你bitmap的资源，注意这个<a href="http://stackoverflow.com/questions/34831142/how-to-center-vector-drawable-in-layer-list-without-scaling" target="_blank" rel="noopener">bug</a>。不幸的是，没有相应的解决方案所以在API版本小于23的情况下闪屏页中的图片要用png格式。</vector></p><h4 id="初始化库"><a href="#初始化库" class="headerlink" title="初始化库"></a>初始化库</h4><p>现在我们有了闪屏页，接下来干什么呢？现在我们应该考虑一下如何加载这些耗时的库了，Dagger 2和RxJava来救驾！</p><p>如果这个漫长的初始化库只是需要在闪屏页加载一些数据的话我们可以把它定义在SplashModule中，这样的话当我们不再使用的时候可以清除掉它的引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Module</span><br><span class="line">public class SplashModule &#123;</span><br><span class="line">  @Provides @NonNull @SplashScope</span><br><span class="line">  public SplashLibrary splashLibrary() &#123;</span><br><span class="line">    return new SplashLibrary(); // Takes &gt;5 seconds.</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前我们还不能在任何地方注入这个库，因为它会阻塞UI线程。我们将会创建一个Observable来接受SplashLibrary实例，但仍然不会被初始化因为我们通过<a href="https://github.com/google/dagger/blob/master/core/src/main/java/dagger/Lazy.java" target="_blank" rel="noopener">Lazy&lt;&gt;</a>实例化它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Module</span><br><span class="line">public class SplashModule &#123;</span><br><span class="line">  // ...</span><br><span class="line"></span><br><span class="line">  @Provides @NonNull @SplashScope</span><br><span class="line">  public Observable&lt;SplashLibrary&gt; observable(final Lazy&lt;SplashLibrary&gt; library) &#123;</span><br><span class="line">    return Observable.defer(new Func0&lt;Observable&lt;SplashLibrary&gt;&gt;() &#123;</span><br><span class="line">      @Override public Observable&lt;SplashLibrary&gt; call() &#123;</span><br><span class="line">        return Observable.just(library.get());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注入这个库"><a href="#注入这个库" class="headerlink" title="注入这个库"></a>注入这个库</h4><p>最后我们可以在SplashActivity中注入Observable<splashlibrary></splashlibrary></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/** Observable which will emit an item when fully initialized. */</span><br><span class="line">@Inject Observable&lt;SplashLibrary&gt; splashLibraryObservable;</span><br><span class="line"></span><br><span class="line">/** Subscription to unsubscribe in onStop(). */</span><br><span class="line">private Subscription subscription;</span><br><span class="line"></span><br><span class="line">@Override protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">  super.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">  // ...</span><br><span class="line"></span><br><span class="line">  subscription = splashLibraryObservable</span><br><span class="line">      // Init library on another thread.</span><br><span class="line">      .subscribeOn(Schedulers.computation())</span><br><span class="line">      // Observe result on the main thread.</span><br><span class="line">      .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">      .subscribe(new Action1&lt;SplashLibrary&gt;() &#123;</span><br><span class="line">        @Override public void call(SplashLibrary splashLibrary) &#123;</span><br><span class="line"></span><br><span class="line">          // Use the initialized library.</span><br><span class="line"></span><br><span class="line">          Intent intent = new Intent(activity, MainActivity.class);</span><br><span class="line">          startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里仍然有一些需要注意的坑：<br>1、这个库可能抛出异常=&gt;我们需要实现onError()方法。<br>2、当我们在初始化完成前离开或者旋转页面时可能会导致内存泄露因为我们在回调方法中持有activity的引用。</p><h4 id="处理当初始化一个重量级库的时候引发的错误"><a href="#处理当初始化一个重量级库的时候引发的错误" class="headerlink" title="处理当初始化一个重量级库的时候引发的错误"></a>处理当初始化一个重量级库的时候引发的错误</h4><p>为了解决这个问题，我们可以通过一个Observer订阅subscribe()。非常简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.subscribe(new Observer&lt;SplashLibrary&gt;() &#123;</span><br><span class="line">  final String TAG = &quot;Observer&lt;SplashLibrary&gt;&quot;;</span><br><span class="line"></span><br><span class="line">  @Override public void onCompleted() &#123;  &#125;</span><br><span class="line"></span><br><span class="line">  @Override public void onError(Throwable e) &#123;</span><br><span class="line">    Log.d(TAG, &quot;Library init error!&quot;, e);</span><br><span class="line">    // Possible UI interaction.</span><br><span class="line">    // ...</span><br><span class="line">    finish();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override public void onNext(SplashLibrary splashLibrary) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    // Use the initialized library.</span><br><span class="line"></span><br><span class="line">    Intent intent = new Intent(activity, MainActivity.class);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">    finish();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="处理当用户离开activity页面时引发的内存泄露问题"><a href="#处理当用户离开activity页面时引发的内存泄露问题" class="headerlink" title="处理当用户离开activity页面时引发的内存泄露问题"></a>处理当用户离开activity页面时引发的内存泄露问题</h4><p>在这个例子中我们仅仅从Subscription取消订阅是不够的，因为当对象正在初始化的过程中Subscription不能释放资源从而是我们在内存中持有已经销毁的activity的资源导致内存泄露。如果在Application中开启了StrictMode.enableDefaults();我们很容易在LogCat中看到，当旋转activity页面日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E/StrictMode: class .SplashActivity; instances=2; limit=1</span><br><span class="line">android.os.StrictMode$InstanceCountViolation: class .SplashActivity; instances=2; limit=1</span><br><span class="line">at android.os.StrictMode.setClassInstanceLimit(StrictMode.java:1)</span><br></pre></td></tr></table></figure><p>这就是为什么我们需要去释放在Observer创建中持有的对activity的引用，我们可以通过创建一个实现了Observer<splashactivity>的静态类来实现，并且在onDestroy()中清除引用，通过这种方法我们可以确保没有任何泄露。</splashactivity></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private static final class OnInitObserver implements Observer&lt;SplashLibrary&gt; &#123;</span><br><span class="line">  @Nullable private SplashActivity splashActivity;</span><br><span class="line"></span><br><span class="line">  OnInitObserver(@NonNull SplashActivity splashActivity) &#123;</span><br><span class="line">    this.splashActivity = splashActivity;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override public void onCompleted() &#123; /* ... */ &#125;</span><br><span class="line">  @Override public void onError(Throwable e) &#123; /* ... */ &#125;</span><br><span class="line">  @Override public void onNext(SplashLibrary splashLibrary) &#123; /* ... */ &#125;</span><br><span class="line"></span><br><span class="line">  public void releaseListener() &#123;</span><br><span class="line">    splashActivity = null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override protected void onDestroy() &#123;</span><br><span class="line">  super.onDestroy();</span><br><span class="line"></span><br><span class="line">  onInitObserver.releaseListener();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记住这些点，可以在闪屏页中很容易初始化一个库、发起一个网络请求或者做一些复杂的处理。</p><p>感谢阅读！<a href="https://github.com/zsavely/FastStartUp" target="_blank" rel="noopener">源码在这里</a></p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在这篇文章中我想展示的是当开发人员有一个初始化很慢的库时可能不希望在主线程中来初始化这个库，因为它将阻塞UI线程使应用无响应。相反，开发人员希望在后台加载它，然后将结果通知到主线程中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;闪屏页&quot;&gt;
      
    
    </summary>
    
      <category term="Android译文" scheme="http://logan62334.github.io/categories/Android%E8%AF%91%E6%96%87/"/>
    
    
      <category term="Android译文" scheme="http://logan62334.github.io/tags/Android%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>[Android] 优雅的处理登录页面跳转逻辑</title>
    <link href="http://logan62334.github.io/2016/07/10/Android-%E4%BC%98%E9%9B%85%E7%9A%84%E5%A4%84%E7%90%86%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E9%80%BB%E8%BE%91/"/>
    <id>http://logan62334.github.io/2016/07/10/Android-优雅的处理登录页面跳转逻辑/</id>
    <published>2016-07-10T13:12:35.000Z</published>
    <updated>2019-02-26T06:39:44.790Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一般有用户系统的应用都会有以下两种需求：<br>1、在执行某个动作时需要判断当前用户是否登录，如果没有登录则跳转至登录页面，登录成功后返回原页面但不执行任何操作，如果已经登录则直接执行相应的操作。<br>2、在执行某个动作时需要判断当前用户是否登录，如果没有登录则跳转至登录页面，登录成功后返回原页面继续执行相应的操作，如果已经登录则直接执行相应的操作。<br>但往往一个应用中会有很多地方需要有这样的判断逻辑，所以直觉告诉我们应该把这一重复的处理逻辑封装一下：</p></blockquote><h5 id="1、定义工具类LoginUtil-java"><a href="#1、定义工具类LoginUtil-java" class="headerlink" title="1、定义工具类LoginUtil.java"></a>1、定义工具类LoginUtil.java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public class LoginUtil extends Activity &#123;</span><br><span class="line"></span><br><span class="line">  private int REQUEST_CODE_LOGIN = 1;</span><br><span class="line">  static LoginCallback mCallback;</span><br><span class="line"></span><br><span class="line">  public interface LoginCallback &#123;</span><br><span class="line">    void onLogin();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    Intent intent = new Intent(this, LoginActivity.class);</span><br><span class="line">    startActivityForResult(intent, REQUEST_CODE_LOGIN);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static void checkLogin(Context context, LoginCallback callback) &#123;</span><br><span class="line">    //此处检查当前的登录状态</span><br><span class="line">    boolean login = AccountMgr.get().isLogin();</span><br><span class="line">    if (login) &#123;</span><br><span class="line">      callback.onLogin();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      mCallback = callback;</span><br><span class="line">      Intent intent = new Intent(context, LoginUtil.class);</span><br><span class="line">      context.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static void checkLogin(Context context, LoginCallback logged, LoginCallback callback) &#123;</span><br><span class="line">    //此处检查当前的登录状态</span><br><span class="line">    boolean login = AccountMgr.get().isLogin();</span><br><span class="line">    if (login) &#123;</span><br><span class="line">      logged.onLogin();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      mCallback = callback;</span><br><span class="line">      Intent intent = new Intent(context, LoginUtil.class);</span><br><span class="line">      context.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class="line">    finish();</span><br><span class="line">    if (requestCode == REQUEST_CODE_LOGIN &amp;&amp; resultCode == RESULT_OK &amp;&amp; mCallback != null) &#123;</span><br><span class="line">      mCallback.onLogin();</span><br><span class="line">    &#125;</span><br><span class="line">    mCallback = null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、在AndroidManifest-xml里配置此activity的主题"><a href="#2、在AndroidManifest-xml里配置此activity的主题" class="headerlink" title="2、在AndroidManifest.xml里配置此activity的主题"></a>2、在AndroidManifest.xml里配置此activity的主题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">  android:name=&quot;com.xxx.base.utils.LoginUtil&quot;</span><br><span class="line">  android:theme=&quot;@style/NoDisplay&quot; /&gt;</span><br></pre></td></tr></table></figure><p>注意：在values中创建主题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;NoDisplay&quot; parent=&quot;android:Theme.NoDisplay&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>在values-v23中创建适配主题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;NoDisplay&quot; parent=&quot;android:Theme.Translucent.NoTitleBar&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h5 id="3、在登录页面成功登录后执行下面语句："><a href="#3、在登录页面成功登录后执行下面语句：" class="headerlink" title="3、在登录页面成功登录后执行下面语句："></a>3、在登录页面成功登录后执行下面语句：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe(threadMode = ThreadMode.MAIN)</span><br><span class="line">  public void onEventMainThread(AccountEvent.LoginEvent event) &#123;</span><br><span class="line">    setResult(Activity.RESULT_OK);</span><br><span class="line">    finish();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="4、在需要判断登录的地方直接调用下面两种重载方法即可："><a href="#4、在需要判断登录的地方直接调用下面两种重载方法即可：" class="headerlink" title="4、在需要判断登录的地方直接调用下面两种重载方法即可："></a>4、在需要判断登录的地方直接调用下面两种重载方法即可：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LoginUtil.checkLogin(getActivity(), new LoginUtil.LoginCallback() &#123;</span><br><span class="line">      public void onLogin() &#123;</span><br><span class="line">        //已经登录和未登录状态下进行的操作</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LoginUtil.checkLogin(getActivity(), new LoginUtil.LoginCallback() &#123;</span><br><span class="line">      @Override public void onLogin() &#123;</span><br><span class="line">        //已经登录状态进行的操作</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, null);</span><br></pre></td></tr></table></figure><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="关注FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一般有用户系统的应用都会有以下两种需求：&lt;br&gt;1、在执行某个动作时需要判断当前用户是否登录，如果没有登录则跳转至登录页面，登录成功后返回原页面但不执行任何操作，如果已经登录则直接执行相应的操作。&lt;br&gt;2、在执行某个动作时需要判断当前用户是否登录
      
    
    </summary>
    
      <category term="Android笔记" scheme="http://logan62334.github.io/categories/Android%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Android笔记" scheme="http://logan62334.github.io/tags/Android%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[两周阅读清单] Realm、单元测试、Rxjava、读书</title>
    <link href="http://logan62334.github.io/2016/06/19/%E4%B8%A4%E5%91%A8%E9%98%85%E8%AF%BB%E6%B8%85%E5%8D%95-Realm%E3%80%81%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81Rxjava%E3%80%81%E8%AF%BB%E4%B9%A6/"/>
    <id>http://logan62334.github.io/2016/06/19/两周阅读清单-Realm、单元测试、Rxjava、读书/</id>
    <published>2016-06-19T17:15:44.000Z</published>
    <updated>2019-02-26T06:39:44.794Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为什么这次是两周呢？是因为上周去南京浪了所以没更😂</p></blockquote><h4 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h4><p><a href="http://chriszou.com/" target="_blank" rel="noopener">Android单元测试系列文章</a><br>这系列文章是蘑菇街的小创发表的，应该是目前为止我知道的讲Android单元测试最系统全面的了，大家关于一切单元测试的问题和疑惑都可以在这里找到一些参考。</p><p><a href="http://www.jianshu.com/p/8cf84f719188" target="_blank" rel="noopener">是时候学习RxJava了</a><br>这篇文章讲了RxJava的多种使用场景，有很多有趣的用法。</p><p><a href="http://gold.xitu.io/entry/56d7885defa6310054aecd5c/view" target="_blank" rel="noopener">更优雅的 Android 发布自动版本号方案</a><br>如果你的项目是用 Git 管理的，并且恰巧又是使用 Gradle 编译，那么这里有一种更加优雅的自动版本管理方法。</p><p><a href="https://zhuanlan.zhihu.com/p/20717041?refer=rosicky311&amp;from=timeline&amp;isappinstalled=0#rd" target="_blank" rel="noopener">『直播』大时代</a><br>之前一直不理解为什么直播能火，看了一些文章之后慢慢有了一些认识了。</p><h4 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h4><p><a href>《人类简史》</a><br>这是最近一段时间读过的书中感觉最好的一本了，不要被它的标题迷惑了，其实它不是一本单纯讲历史的书籍，其中涵盖了很多社会人文科学自然等多领域的知识和他们之间内在的一些联系，时不时就应该充实一下自己的精神世界，哈哈。</p><h4 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h4><p><a href="https://realm.io/cn/docs/java/latest/#section" target="_blank" rel="noopener">Realm</a><br>这个库更新的挺快的，现在正式版已发亲测非常高效，而且最近在WWDC上也提到了。</p><p><a href="https://github.com/lingochamp/FileDownloader" target="_blank" rel="noopener">FileDownloader</a><br>这是流利说团队开源的一个下载引擎的库，提的issue回复很快，同时亲测很好使。</p><hr><p><img src="https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg" alt="FullStackEngineer的公众号，更多分享"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;为什么这次是两周呢？是因为上周去南京浪了所以没更😂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;文章&quot;&gt;&lt;a href=&quot;#文章&quot; class=&quot;headerlink&quot; title=&quot;文章&quot;&gt;&lt;/a&gt;文章&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="一周阅读清单" scheme="http://logan62334.github.io/categories/%E4%B8%80%E5%91%A8%E9%98%85%E8%AF%BB%E6%B8%85%E5%8D%95/"/>
    
    
      <category term="一周阅读清单" scheme="http://logan62334.github.io/tags/%E4%B8%80%E5%91%A8%E9%98%85%E8%AF%BB%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
</feed>
