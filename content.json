{"meta":{"title":"马飞的博客","subtitle":null,"description":"产品改变世界，技术驱动未来","author":"马飞","url":"http://logan62334.github.io"},"pages":[{"title":"Tags","date":"2016-02-01T04:47:41.000Z","updated":"2016-02-01T04:43:42.000Z","comments":true,"path":"tags/index.html","permalink":"http://logan62334.github.io/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2016-02-01T04:47:41.000Z","updated":"2016-02-01T04:43:42.000Z","comments":true,"path":"categories/index.html","permalink":"http://logan62334.github.io/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2016-08-19T05:58:53.000Z","updated":"2016-08-19T05:58:53.000Z","comments":true,"path":"about/index.html","permalink":"http://logan62334.github.io/about/index.html","excerpt":"","text":"关于博客画家与黑客是相似的：他们都是创造者，就好像作曲家，建筑师，以及作家一样，他们的目的是创造某种美好的事物。博客内容不一定与技术相关，技术只是我们解决问题的工具。 关于作者 想做产品，却误入程序世界不小心爱上摄影的旅行家。 我的微信公众号：FullStackEngineer"}],"posts":[{"title":"[译文] 我不使用Android Data Binding的四个理由","slug":"译文-我不使用Android-Data-Binding的四个理由","date":"2016-08-14T11:06:56.000Z","updated":"2016-08-24T02:07:56.000Z","comments":true,"path":"2016/08/14/译文-我不使用Android-Data-Binding的四个理由/","link":"","permalink":"http://logan62334.github.io/2016/08/14/译文-我不使用Android-Data-Binding的四个理由/","excerpt":"","text":"为什么我还在用ButterKnife。 免责声明：本文是基于个人经验和实践可以随意反驳，是否采纳自行决定。 1、专家不建议这么做ButterKnife的作者Jake在下面这个github issue中直指要点。 data binding在最简单的场景下是比较有用的。但它并没有什么创新，所以在复杂度增加的情况下还是会像其他平台上的解决方案一样用起来非常痛苦（例如：XAML）。当这个库扩展到高级的情况下，将会迫使你把绑定的逻辑写到代码中，那里才是它真正该在的地方。 事实上，我同意其中的两点： 1、它的扩展性并不好。2、业务逻辑应该在代码中。 2、它让你写出意大利面式的代码一旦我们开始实现复杂的布局，将会使我们的Data Binding解决方案越来越复杂。 首先我们将会面临下面的问题： 1、Layout 要求你给他们分别传递数据。 2、你也可能想为你的布局创建不同的数据源。 3、同样的问题也会在ViewStubs中发生。 4、当你使用Picasso加载图片的时候，你需要为他实现一个自定义的data binding adapter，那样的话你就不能作为依赖mock和注入了。 我们可能会试着做些更复杂的事情： 1、在layout中增加presentation的逻辑。1&#60;TextView&#10; android:text=&#34;@&#123;user.lastName&#125;&#34;&#10; android:layout_width=&#34;wrap_content&#34;&#10; android:layout_height=&#34;wrap_content&#34;&#10; android:visibility=&#34;@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;&#34;/&#62; 2、在listeners中增加Lambda表达式。1android:onLongClick=&#34;@&#123;(theView) -&#62; presenter.onLongClick(theView, task)&#125;&#34; 3、在layouts中使用导入的class类。1&#60;data&#62;&#10; &#60;import type=&#34;android.view.View&#34;/&#62;&#10;&#60;/data&#62; 我们的逻辑一部分在代码中一部分在布局文件中，这将很快变成一个噩梦，并且闻起来像是意大利面式的代码。 3、单元测试也不能用了我非常喜欢Robolectric和Mockito，他们节约了我很多时间在创建和运行测试实例的时候，没有了他们我将无法工作。 Data Binding的一个特性对于我来说是一个bug：如果layout发生了异步更新，那就意味着在我设置了绑定之后单元测试中我无法确定view上的数据是否正确。 我记得google用Espresso实现的测试框架，但如果有可能的话我还是希望用单元测试的方式来测UI。我喜欢将Activities、Fragments和Views分开来测试而不是在一个大的Instrumentation Test中导入他们。 4、它比ButterKnife提供的功能少很多ButterKnife提供了很多不错的特性，可能有些我们都不记得了： 1、资源绑定 2、View 列表 3、多个监听器的绑定 当我们用自定义控件做一些高级的实现的时候，资源绑定是非常有用的，我们可以通过它获取到Dimensions和Drawables。 当我们有一系列的视图触发同样的操作的时候，多视图绑定和多监听器绑定会让我们少写很多代码，例如：一系列的EditText和Buttons。 而如果你使用Data Binding库将得不到这些功能。 为什么你会使用Data Binding 1、我可以开发的更快长远来看，快速并不一定总是好的。当我们开发app的时候，我们是在跑一场马拉松而不是一次百米冲刺……不是吗？ 2、它已经存在于系统sdk中不需要引入第三方库总归是好事情。如果你被调入到一个已经出现了方法数快超过限制的项目中时，你的leader将不希望你再引入过多的第三方库。 3、我在遵循MVVM的模式如果你正确的利用观察者模式实现了MVVM，Data Binding库将会帮助你在views中实现观察者模式。 谢谢你看了这么长时间！","categories":[{"name":"Android译文","slug":"Android译文","permalink":"http://logan62334.github.io/categories/Android译文/"}],"tags":[{"name":"Android译文","slug":"Android译文","permalink":"http://logan62334.github.io/tags/Android译文/"}],"keywords":[{"name":"Android译文","slug":"Android译文","permalink":"http://logan62334.github.io/categories/Android译文/"}]},{"title":"[译文] Android开发最佳实践","slug":"译文-Android开发最佳实践","date":"2016-08-06T02:53:33.000Z","updated":"2016-08-08T02:41:53.000Z","comments":true,"path":"2016/08/06/译文-Android开发最佳实践/","link":"","permalink":"http://logan62334.github.io/2016/08/06/译文-Android开发最佳实践/","excerpt":"","text":"你的软件开发效率不仅仅取决于你有多么深的知识和经验，还依赖于你的开发工具、环境配置和团队协作能力。 我最近在 Droidcon Berlin做了一个关于在我们Zalando Tech team的一个Android开发者最佳实践的分享。接下来你可以找到我演讲中的一些要点，将使你的开发生活更加愉快并且让你的应用更加稳定。 1、你的AndroidManifest文件真实的样子是什么我们大多数人早已知道我们在文本编辑器中看到的AndroidManifest.xml 文件跟实际编译好生成的的内容并不一样。这主要是因为你在工程中包含的第三方库中存在额外的&lt;uses-permission/&gt;标签，将和你自己的manifest文件混合。（The Commons Blog查看更详细的信息） 在构建APK前检查你的manifest，我们可以用Android Studio 2.2中提供的新特性：Merged Manifest Viewer。这个工具将会给你展示你的AndroidManifest是如何基于build types, flavors, and variants这些配置和你的依赖包merge的。你可以导航到AndroidManifest.xml文件点击底部的Merged Manifest标签使用这个工具。 2、Support annotations是你的朋友另外一个特别有用的工具是support annotations library。你可以通过在你的build.gradle文件中添加“com.android.support:support-annotations:23.4.0” 来包含入你的工程。使用这些metadata annotations去修饰你的代码帮助你发现bug定义编码规则。最常规的使用场景是标记nullable和non-nullable，链接资源，并且指定从哪个线程被回调。 既然这些annotations是metadata annotations，所以即使你违反了它定义的语法规则你的工程也会编译。然而它会被Android Studio 和 Lint标记为高亮，并且在你的持续集成工具输出中对你的团队成员是可见的。 3、快速、无痛的code review假设你想要去做一个code review，检查开发feature是如何工作的是有意义的，所以你需要去编译你的工程。这种情况有下面这样的一种通用工作流： 1.在你当前分支Stash changes2.Checkout branch来做review3.在你的IDE中重新加载gradle配置4.在IDE中读代码5.编译启动并且测试app6.重复 (1) — (5)的动作 “这里有什么问题吗？”你会问。是的，除了下面这种情况之外没什么问题，当你的工程有1000+的类和配置文件不同的时候你将会用你强劲的MacBook花超过三分钟用在编译你的代码上。 我们的解决方案是使用一个专用的IDE实例和存储库文件夹来做code review。在这种情况下你的工作在一段时间内不会停止，你可以在任何时候回到你的主IDE和分支。这里有个小的免责声明：我们建议你使用一台至少有16GB RAM的机器，它为你节省的时间绝对非常值。 4、快速的应用修改即使你的工程很小，你会经常花时间在编译部署最新的变化到测试机和模拟器上。如果你有上百个类和xml文件，每次编译和部署会花去你很多时间，即使你用配置很高的电脑。此外，你需要手动定位到应用变化的地方，这也需要一些时间。 在2015年底，Android社区收到两个可以让代码变化应用得更快的工具。第一个是JRebel，它是来自Java后端世界并且已经成为很长一段时间的行业标准。另外一个工具便是google在Android Studio 2.0中发布的Instant Run，这些工具都有共同的目的，但是JRebel有更多的特性，并且需要按年支付许可证。 这两个工具单看看不出有什么不同，于是我们通过文档和一些博客分析了他们的不同： 来源：https://developer.android.com/studio/run/index.html#instant-runReto Meier: “Instant Run: How Does it Work?!”Oleg Selajev: “Looking at JRebel for Android and Instant Run …” 几乎每周这两个工具都在积极的开发和改进。根据我们的经验，虽然很多用例还没有涉及，但你已经可以受益于这些工具了。 5、衡量执行时间另一个非常有用的特性是在应用程序调试和性能分析日志记录方法输入/输出和执行时间。对于这些需求，我们使用一个简单的和优雅的方法注释工具——Hugo by Jake Wharton。如果你仅仅只是想看日志输出并不需要像Systrace这样深度和复杂的工具。 你需要做的只是去标注目标方法，如图所示：1@DebugLog&#10;public String getName(String first, String last) &#123;/* ... */&#125; 在日志中找到相应的方法调用的打印信息：1V/Example: --&#62; getName(first=&#34;Jake&#34;, last=&#34;Wharton&#34;)&#10;V/Example: &#60;-- getName [16ms] = &#34;Jake Wharton&#34; 6、如何从你的设备上读取日志输出信息为了日常的需要，我们大多数人使用Android Studio内置的Monitor来读取日志。在简单的场景下它使用很方便，但我们注意到几个权衡使用这种方法: 1.日志是难以阅读,你应该使用外部工具或格式化配置。 2.Android Studio的日志工具是和你部署的应用程序的进程ID关联的。如果你重新部署应用程序或杀死进程,你以前的日志都会丢失,因为Android Studio是跟进程ID绑定的。 为了解决这个问题我们可以使用Jake Wharton — pidcat。它的主要好处如下： 1.好颜色模式和格式。 2.由包名称连接到调试应用程序,而不是进程ID。所有的日志都将被保持在重新部署应用程序后。 7、网络输出日志记录和分析最常见的阅读你应用网路交互日志输出的方式是通过HTTP客户端。然而,这种方法有几个权衡: 1.如果你要在开发过程中保持所有的网络请求日志，你将注意到,应用程序的性能有所下降,需要一些时间来打印日志。 2.如果你的应用有一些额外的库需要用到网络，（例如：Google Analytics）你需要为这些额外的库做一些配置 来让所有的数据被记录。 这里有另外一种方法：使用HTTP监控软件 Charles Proxy，这种类型的工具会提供如下的功能，把你的应用包装为黑盒： 1.HTTP/HTTPS通道的监控和记录 2.重新修改返回值和服务器响应的边界情况 3.在网络回调的地方打断点 4.将SSL证书安装到设备读取加密流量 更新，评论中 Nahuel Barrios提到的另外一个可以替代的网络监控工具是 Facebook Stetho我们仍然不能通过Stetho读取Google Analytics中的SSL加密的通信信息，如果你知道任何关于这个的信息请联系我。 8、保证在不同版本的操作系统上测试我一直在做并且推动我同事做的事情是在Lollipop和更高的(API 21+)的版本中测试每一个功能。这样我可以在测试期间捕获这些bug。 你会发现通常的兼容问题都是些触摸反馈和系统颜色的不一致，我们经常看到app由于兼容问题在老的API中崩溃。 9、自动化屏幕交互测试我们经常需要检查一些场景在不同设备上做重复的UI点击和输入。如果你有三到四台测试设备那将是非常烦人的，你需要一个回归测试计划去测试通过30各场景。 自动化的第一步，我们通过输入adb命令或者脚本去实现从而避免每次都要手动和设备交互。你可以通过系统按键、键盘输入和屏幕触控来实现adb命令的输入。 但是如果你有三台设备要同时测试一个场景，你会怎么做？我们可以使用adb-ninja来让不同设备同时测试。 10、检查你的build.gradle配置有时甚至一些有经验的开发者也会使用一些过时的配置实践。让我们检查一下你的build.gradle文件，看看你有没有中招： 1.舍弃mavenCentral，去用jcenter作为依赖仓库。jcenter拥有更快的响应时间并且已经集成了mavenCental的内容。 2.检查Android Plugin for Gradle的版本，保持最新的版本可以提高编译性能并且会得到像Instant Run这样好用的功能。 3.不要指定依赖库的版本范围，要使用像“23.4.0”这样的版本常量，减少每次编译依赖库时的网络请求。 4.设置编译版本minSdkVersion 21或者更高，将会提高构建速度。","categories":[{"name":"Android译文","slug":"Android译文","permalink":"http://logan62334.github.io/categories/Android译文/"}],"tags":[{"name":"Android译文","slug":"Android译文","permalink":"http://logan62334.github.io/tags/Android译文/"}],"keywords":[{"name":"Android译文","slug":"Android译文","permalink":"http://logan62334.github.io/categories/Android译文/"}]},{"title":"[译文] 如何正确在闪屏页加载耗时的库","slug":"译文-如何正确在闪屏页加载耗时的库","date":"2016-07-27T13:30:47.000Z","updated":"2016-08-19T02:51:28.000Z","comments":true,"path":"2016/07/27/译文-如何正确在闪屏页加载耗时的库/","link":"","permalink":"http://logan62334.github.io/2016/07/27/译文-如何正确在闪屏页加载耗时的库/","excerpt":"","text":"在这篇文章中我想展示的是当开发人员有一个初始化很慢的库时可能不希望在主线程中来初始化这个库，因为它将阻塞UI线程使应用无响应。相反，开发人员希望在后台加载它，然后将结果通知到主线程中。 闪屏页首先，如果你已经有一些初始化的东西在自己定义的application中，你可能需要一个适当的闪屏页。这意味着当点击应用程序图标的同时应该出现闪屏页。它可以很容易通过设置SplashActivity的主题背景实现。 1&#60;style name=&#34;SplashTheme&#34; parent=&#34;Theme.AppCompat.NoActionBar&#34;&#62;&#10; &#60;item name=&#34;android:windowBackground&#34;&#62;@drawable/background_splash&#60;/item&#62;&#10;&#60;/style&#62; 在你的AndroidManifest.xml中 1&#60;activity&#10; android:name=&#34;.splash.SplashActivity&#34;&#10; android:theme=&#34;@style/SplashTheme&#34;&#62;&#10; &#60;intent-filter&#62;&#10; &#60;action android:name=&#34;android.intent.action.MAIN&#34;/&#62;&#10; &#60;category android:name=&#34;android.intent.category.LAUNCHER&#34;/&#62;&#10; &#60;/intent-filter&#62;&#10;&#60;/activity&#62; 通常闪屏页是一个logo，所以这个@drawable/background_splash可以是一个layer-list，例如： 1&#60;layer-list xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#62;&#10; &#60;item android:drawable=&#34;@android:color/holo_blue_dark&#34;/&#62;&#10;&#10; &#60;item&#62;&#10; &#60;bitmap&#10; android:gravity=&#34;center&#34;&#10; android:src=&#34;@drawable/ic_hockey_stick&#34;/&#62;&#10; &#60;/item&#62;&#10;&#60;/layer-list&#62; 关于这个的实现就到这里。 顺便说一句，如果你使用作为你bitmap的资源，注意这个bug。不幸的是，没有相应的解决方案所以在API版本小于23的情况下闪屏页中的图片要用png格式。 初始化库现在我们有了闪屏页，接下来干什么呢？现在我们应该考虑一下如何加载这些耗时的库了，Dagger 2和RxJava来救驾！ 如果这个漫长的初始化库只是需要在闪屏页加载一些数据的话我们可以把它定义在SplashModule中，这样的话当我们不再使用的时候可以清除掉它的引用。 1@Module&#10;public class SplashModule &#123;&#10; @Provides @NonNull @SplashScope&#10; public SplashLibrary splashLibrary() &#123;&#10; return new SplashLibrary(); // Takes &#62;5 seconds.&#10; &#125;&#10;&#125; 目前我们还不能在任何地方注入这个库，因为它会阻塞UI线程。我们将会创建一个Observable来接受SplashLibrary实例，但仍然不会被初始化因为我们通过Lazy&lt;&gt; 实例化它。 1@Module&#10;public class SplashModule &#123;&#10; // ...&#10;&#10; @Provides @NonNull @SplashScope&#10; public Observable&#60;SplashLibrary&#62; observable(final Lazy&#60;SplashLibrary&#62; library) &#123;&#10; return Observable.defer(new Func0&#60;Observable&#60;SplashLibrary&#62;&#62;() &#123;&#10; @Override public Observable&#60;SplashLibrary&#62; call() &#123;&#10; return Observable.just(library.get());&#10; &#125;&#10; &#125;);&#10; &#125;&#10;&#125; 注入这个库最后我们可以在SplashActivity中注入Observable 1/** Observable which will emit an item when fully initialized. */&#10;@Inject Observable&#60;SplashLibrary&#62; splashLibraryObservable;&#10;&#10;/** Subscription to unsubscribe in onStop(). */&#10;private Subscription subscription;&#10;&#10;@Override protected void onCreate(Bundle savedInstanceState) &#123;&#10; super.onCreate(savedInstanceState);&#10;&#10; // ...&#10;&#10; subscription = splashLibraryObservable&#10; // Init library on another thread.&#10; .subscribeOn(Schedulers.computation())&#10; // Observe result on the main thread.&#10; .observeOn(AndroidSchedulers.mainThread())&#10; .subscribe(new Action1&#60;SplashLibrary&#62;() &#123;&#10; @Override public void call(SplashLibrary splashLibrary) &#123;&#10;&#10; // Use the initialized library.&#10;&#10; Intent intent = new Intent(activity, MainActivity.class);&#10; startActivity(intent);&#10; &#125;&#10; &#125;);&#10; &#125;&#10;&#125; 这里仍然有一些需要注意的坑：1、这个库可能抛出异常=&gt;我们需要实现onError()方法。2、当我们在初始化完成前离开或者旋转页面时可能会导致内存泄露因为我们在回调方法中持有activity的引用。 处理当初始化一个重量级库的时候引发的错误为了解决这个问题，我们可以通过一个Observer订阅subscribe()。非常简单： 1.subscribe(new Observer&#60;SplashLibrary&#62;() &#123;&#10; final String TAG = &#34;Observer&#60;SplashLibrary&#62;&#34;;&#10;&#10; @Override public void onCompleted() &#123; &#125;&#10;&#10; @Override public void onError(Throwable e) &#123;&#10; Log.d(TAG, &#34;Library init error!&#34;, e);&#10; // Possible UI interaction.&#10; // ...&#10; finish();&#10; &#125;&#10;&#10; @Override public void onNext(SplashLibrary splashLibrary) &#123;&#10; // ...&#10; // Use the initialized library.&#10;&#10; Intent intent = new Intent(activity, MainActivity.class);&#10; startActivity(intent);&#10; finish();&#10; &#125;&#10;&#125;); 处理当用户离开activity页面时引发的内存泄露问题在这个例子中我们仅仅从Subscription取消订阅是不够的，因为当对象正在初始化的过程中Subscription不能释放资源从而是我们在内存中持有已经销毁的activity的资源导致内存泄露。如果在Application中开启了StrictMode.enableDefaults();我们很容易在LogCat中看到，当旋转activity页面日志如下： 1E/StrictMode: class .SplashActivity; instances=2; limit=1&#10;android.os.StrictMode$InstanceCountViolation: class .SplashActivity; instances=2; limit=1&#10;at android.os.StrictMode.setClassInstanceLimit(StrictMode.java:1) 这就是为什么我们需要去释放在Observer创建中持有的对activity的引用，我们可以通过创建一个实现了Observer的静态类来实现，并且在onDestroy()中清除引用，通过这种方法我们可以确保没有任何泄露。 1private static final class OnInitObserver implements Observer&#60;SplashLibrary&#62; &#123;&#10; @Nullable private SplashActivity splashActivity;&#10;&#10; OnInitObserver(@NonNull SplashActivity splashActivity) &#123;&#10; this.splashActivity = splashActivity;&#10; &#125;&#10;&#10; @Override public void onCompleted() &#123; /* ... */ &#125;&#10; @Override public void onError(Throwable e) &#123; /* ... */ &#125;&#10; @Override public void onNext(SplashLibrary splashLibrary) &#123; /* ... */ &#125;&#10;&#10; public void releaseListener() &#123;&#10; splashActivity = null;&#10; &#125;&#10;&#125; 1@Override protected void onDestroy() &#123;&#10; super.onDestroy();&#10;&#10; onInitObserver.releaseListener();&#10;&#125; 记住这些点，可以在闪屏页中很容易初始化一个库、发起一个网络请求或者做一些复杂的处理。 感谢阅读！源码在这里","categories":[{"name":"Android译文","slug":"Android译文","permalink":"http://logan62334.github.io/categories/Android译文/"}],"tags":[{"name":"Android译文","slug":"Android译文","permalink":"http://logan62334.github.io/tags/Android译文/"}],"keywords":[{"name":"Android译文","slug":"Android译文","permalink":"http://logan62334.github.io/categories/Android译文/"}]},{"title":"[Android] 优雅的处理登录页面跳转逻辑","slug":"Android-优雅的处理登录页面跳转逻辑","date":"2016-07-10T05:12:35.000Z","updated":"2016-07-10T05:14:26.000Z","comments":true,"path":"2016/07/10/Android-优雅的处理登录页面跳转逻辑/","link":"","permalink":"http://logan62334.github.io/2016/07/10/Android-优雅的处理登录页面跳转逻辑/","excerpt":"","text":"一般有用户系统的应用都会有以下两种需求：1、在执行某个动作时需要判断当前用户是否登录，如果没有登录则跳转至登录页面，登录成功后返回原页面但不执行任何操作，如果已经登录则直接执行相应的操作。2、在执行某个动作时需要判断当前用户是否登录，如果没有登录则跳转至登录页面，登录成功后返回原页面继续执行相应的操作，如果已经登录则直接执行相应的操作。但往往一个应用中会有很多地方需要有这样的判断逻辑，所以直觉告诉我们应该把这一重复的处理逻辑封装一下： 1、定义工具类LoginUtil.java1public class LoginUtil extends Activity &#123;&#10;&#10;&#160; private int REQUEST_CODE_LOGIN = 1;&#10;&#160; static LoginCallback mCallback;&#10;&#10;&#160; public interface LoginCallback &#123;&#10;&#160; &#160; void onLogin();&#10;&#160; &#125;&#10;&#10;&#160; @Override protected void onCreate(Bundle savedInstanceState) &#123;&#10;&#160; &#160; super.onCreate(savedInstanceState);&#10;&#160; &#160; Intent intent = new Intent(this, LoginActivity.class);&#10;&#160; &#160; startActivityForResult(intent, REQUEST_CODE_LOGIN);&#10;&#160; &#125;&#10;&#10;&#160; public static void checkLogin(Context context, LoginCallback callback) &#123;&#10;&#160; &#160; //&#27492;&#22788;&#26816;&#26597;&#24403;&#21069;&#30340;&#30331;&#24405;&#29366;&#24577;&#10;&#160; &#160; boolean login = AccountMgr.get().isLogin();&#10;&#160; &#160; if (login) &#123;&#10;&#160; &#160; &#160; callback.onLogin();&#10;&#160; &#160; &#125; else &#123;&#10;&#160; &#160; &#160; mCallback = callback;&#10;&#160; &#160; &#160; Intent intent = new Intent(context, LoginUtil.class);&#10;&#160; &#160; &#160; context.startActivity(intent);&#10;&#160; &#160; &#125;&#10;&#160; &#125;&#10;&#10;&#160; public static void checkLogin(Context context, LoginCallback logged, LoginCallback callback) &#123;&#10;&#160; &#160; //&#27492;&#22788;&#26816;&#26597;&#24403;&#21069;&#30340;&#30331;&#24405;&#29366;&#24577;&#10;&#160; &#160; boolean login = AccountMgr.get().isLogin();&#10;&#160; &#160; if (login) &#123;&#10;&#160; &#160; &#160; logged.onLogin();&#10;&#160; &#160; &#125; else &#123;&#10;&#160; &#160; &#160; mCallback = callback;&#10;&#160; &#160; &#160; Intent intent = new Intent(context, LoginUtil.class);&#10;&#160; &#160; &#160; context.startActivity(intent);&#10;&#160; &#160; &#125;&#10;&#160; &#125;&#10;&#10;&#160; @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;&#10;&#160; &#160; finish();&#10;&#160; &#160; if (requestCode == REQUEST_CODE_LOGIN &#38;&#38; resultCode == RESULT_OK &#38;&#38; mCallback != null) &#123;&#10;&#160; &#160; &#160; mCallback.onLogin();&#10;&#160; &#160; &#125;&#10;&#160; &#160; mCallback = null;&#10;&#160; &#125;&#10;&#125; 2、在AndroidManifest.xml里配置此activity的主题1&#60;activity&#10;&#160; android:name=&#34;com.xxx.base.utils.LoginUtil&#34;&#10;&#160; android:theme=&#34;@style/NoDisplay&#34; /&#62; 注意：在values中创建主题：1&#60;style name=&#34;NoDisplay&#34; parent=&#34;android:Theme.NoDisplay&#34;/&#62; 在values-v23中创建适配主题：1&#60;style name=&#34;NoDisplay&#34; parent=&#34;android:Theme.Translucent.NoTitleBar&#34;/&#62; 3、在登录页面成功登录后执行下面语句：1@Subscribe(threadMode = ThreadMode.MAIN)&#10;&#160; public void onEventMainThread(AccountEvent.LoginEvent event) &#123;&#10;&#160; &#160; setResult(Activity.RESULT_OK);&#10;&#160; &#160; finish();&#10;&#160; &#125; 4、在需要判断登录的地方直接调用下面两种重载方法即可：1LoginUtil.checkLogin(getActivity(), new LoginUtil.LoginCallback() &#123;&#10;&#160; &#160; &#160; public void onLogin() &#123;&#10;&#160; &#160; &#160; &#160; //&#24050;&#32463;&#30331;&#24405;&#21644;&#26410;&#30331;&#24405;&#29366;&#24577;&#19979;&#36827;&#34892;&#30340;&#25805;&#20316;&#10;&#160; &#160; &#160; &#125;&#10;&#160; &#160; &#125;); 1LoginUtil.checkLogin(getActivity(), new LoginUtil.LoginCallback() &#123;&#10;&#160; &#160; &#160; @Override public void onLogin() &#123;&#10;&#160; &#160; &#160; &#160; //&#24050;&#32463;&#30331;&#24405;&#29366;&#24577;&#36827;&#34892;&#30340;&#25805;&#20316;&#10;&#160; &#160; &#160; &#125;&#10;&#160; &#160; &#125;, null);","categories":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}],"tags":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/tags/Android笔记/"}],"keywords":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}]},{"title":"[两周阅读清单] Realm、单元测试、Rxjava、读书","slug":"两周阅读清单-Realm、单元测试、Rxjava、读书","date":"2016-06-19T09:15:44.000Z","updated":"2016-06-19T09:16:40.000Z","comments":true,"path":"2016/06/19/两周阅读清单-Realm、单元测试、Rxjava、读书/","link":"","permalink":"http://logan62334.github.io/2016/06/19/两周阅读清单-Realm、单元测试、Rxjava、读书/","excerpt":"","text":"为什么这次是两周呢？是因为上周去南京浪了所以没更😂 文章Android单元测试系列文章这系列文章是蘑菇街的小创发表的，应该是目前为止我知道的讲Android单元测试最系统全面的了，大家关于一切单元测试的问题和疑惑都可以在这里找到一些参考。 是时候学习RxJava了这篇文章讲了RxJava的多种使用场景，有很多有趣的用法。 更优雅的 Android 发布自动版本号方案如果你的项目是用 Git 管理的，并且恰巧又是使用 Gradle 编译，那么这里有一种更加优雅的自动版本管理方法。 『直播』大时代之前一直不理解为什么直播能火，看了一些文章之后慢慢有了一些认识了。 书单《人类简史》这是最近一段时间读过的书中感觉最好的一本了，不要被它的标题迷惑了，其实它不是一本单纯讲历史的书籍，其中涵盖了很多社会人文科学自然等多领域的知识和他们之间内在的一些联系，时不时就应该充实一下自己的精神世界，哈哈。 开源库Realm这个库更新的挺快的，现在正式版已发亲测非常高效，而且最近在WWDC上也提到了。 FileDownloader这是流利说团队开源的一个下载引擎的库，提的issue回复很快，同时亲测很好使。","categories":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/categories/一周阅读清单/"}],"tags":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/tags/一周阅读清单/"}],"keywords":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/categories/一周阅读清单/"}]},{"title":"[Android] ViewPager的notifyDataSetChanged刷新无效果的解决方案","slug":"Android-ViewPager的notifyDataSetChanged刷新无效果的解决方案","date":"2016-06-05T08:11:55.000Z","updated":"2016-06-05T08:13:01.000Z","comments":true,"path":"2016/06/05/Android-ViewPager的notifyDataSetChanged刷新无效果的解决方案/","link":"","permalink":"http://logan62334.github.io/2016/06/05/Android-ViewPager的notifyDataSetChanged刷新无效果的解决方案/","excerpt":"","text":"最近在开发中遇到了一个问题：ViewPager设置的PagerAdapter调用notifyDataSetChanged()时界面无刷新以至于影响到功能的实现。不过有一个很傻的方法倒是可以解决就是给Viewpager重新设置一次适配器，下面我来分享一下如何优雅的解决这个问题吧。 大家进入ViewPager的源码可以看到下面的代码段：1/**&#10; * Set a PagerAdapter that will supply views for this pager as needed.&#10; *&#10; * @param adapter Adapter to use&#10; */&#10; public void setAdapter(PagerAdapter adapter) &#123;&#10; ......&#10;&#10; if (mAdapter != null) &#123;&#10; if (mObserver == null) &#123;&#10; mObserver = new PagerObserver();&#10; &#125;&#10; mAdapter.setViewPagerObserver(mObserver);&#10; ......&#10; &#125;&#10;&#10; ......&#10; &#125;&#10;&#10; private class PagerObserver extends DataSetObserver &#123;&#10; @Override&#10; public void onChanged() &#123;&#10; dataSetChanged();&#10; &#125;&#10; @Override&#10; public void onInvalidated() &#123;&#10; dataSetChanged();&#10; &#125;&#10; &#125;&#10;&#10; void dataSetChanged() &#123;&#10; ......&#10;&#10; for (int i = 0; i &#60; mItems.size(); i++) &#123;&#10; final ItemInfo ii = mItems.get(i);&#10; final int newPos = mAdapter.getItemPosition(ii.object);&#10;&#10; if (newPos == PagerAdapter.POSITION_UNCHANGED) &#123;&#10; continue;&#10; &#125;&#10;&#10; if (newPos == PagerAdapter.POSITION_NONE) &#123;&#10; mItems.remove(i);&#10; i--;&#10;&#10; if (!isUpdating) &#123;&#10; mAdapter.startUpdate(this);&#10; isUpdating = true;&#10; &#125;&#10;&#10; mAdapter.destroyItem(this, ii.position, ii.object);&#10; needPopulate = true;&#10;&#10; if (mCurItem == ii.position) &#123;&#10; // Keep the current item in the valid range&#10; newCurrItem = Math.max(0, Math.min(mCurItem, adapterCount - 1));&#10; needPopulate = true;&#10; &#125;&#10; continue;&#10; &#125;&#10;&#10; ......&#10;&#10; &#125;&#10;&#10; &#125; 意思是如果item的位置如果没有发生变化，则返回POSITION_UNCHANGED；如果item的位置已经不存在了，则回了POSITION_NONE。 解决方案1private class SetDialogAdapter extends PagerAdapter &#123;&#10;&#10; private int mChildCount = 0;&#10;&#10; @Override public void notifyDataSetChanged() &#123;&#10; mChildCount = getCount();&#10; super.notifyDataSetChanged();&#10; &#125;&#10;&#10; @Override public int getItemPosition(Object object) &#123;&#10; if (mChildCount &#62; 0) &#123;&#10; mChildCount--;&#10; return POSITION_NONE;&#10; &#125;&#10; return super.getItemPosition(object);&#10; &#125;&#10;&#125; 我们覆盖getItemPosition()方法，当调用notifyDataSetChanged时，让getItemPosition方法强行返回POSITION_NONE，从而让ViewPager重绘所有item。","categories":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}],"tags":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/tags/Android笔记/"}],"keywords":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}]},{"title":"[Android] 6.0 系统权限适配实践","slug":"Android-6-0-系统权限适配实践","date":"2016-05-28T01:56:06.000Z","updated":"2016-08-19T02:46:55.000Z","comments":true,"path":"2016/05/28/Android-6-0-系统权限适配实践/","link":"","permalink":"http://logan62334.github.io/2016/05/28/Android-6-0-系统权限适配实践/","excerpt":"","text":"Android 6.0也已经出来有一段时间了，其中的权限模式从一开始的全部列出授予，到后来的运行时动态申请，这对开发者来说是一个重要的变化，今天我来分享一下具体的实践过程。 首先检查一下你的项目中 targetSdkVersion，如果是 23及以上，则必须适配新的权限模式；如果是 23以下，则还是统一在安装时全部申请权限。然后你还需要了解哪些权限是危险权限、特殊权限以及正常权限。 接下来我们需要准备两个类：PermissionsChecker.java1/**&#10; * &#26816;&#26597;&#26435;&#38480;&#30340;&#24037;&#20855;&#31867;&#10; *&#10; * @author mafei&#10; */&#10;public class PermissionsChecker &#123;&#10; private final Context mContext;&#10;&#10; public PermissionsChecker(Context context) &#123;&#10; mContext = context.getApplicationContext();&#10; &#125;&#10;&#10; // &#21028;&#26029;&#26435;&#38480;&#38598;&#21512;&#10; public boolean lacksPermissions(String... permissions) &#123;&#10; for (String permission : permissions) &#123;&#10; if (lacksPermission(permission)) &#123;&#10; return true;&#10; &#125;&#10; &#125;&#10; return false;&#10; &#125;&#10;&#10; // &#21028;&#26029;&#26159;&#21542;&#32570;&#23569;&#26435;&#38480;&#10; private boolean lacksPermission(String permission) &#123;&#10; return ContextCompat.checkSelfPermission(mContext, permission)&#10; == PackageManager.PERMISSION_DENIED;&#10; &#125;&#10;&#125; PermissionsType.java1/**&#10; * Created by mafei on 16/3/31.&#10; */&#10;public class PermissionsType &#123;&#10;&#10; /**&#10; * &#35835;&#21462;&#25163;&#26426;&#26435;&#38480;&#10; */&#10; public static final int READ_PHONE_STATE_CODE = 1;&#10; /**&#10; * &#33719;&#21462;&#30456;&#26426;&#26435;&#38480;&#10; */&#10; public static final int CAMERA_CODE = 2;&#10;&#10; /**&#10; * &#33719;&#21462;&#23384;&#20648;&#26435;&#38480;&#10; */&#10; public static final int WRITE_EXTERNAL_STORAGE_CODE = 3;&#10;&#10; public static class PermissionsTypeExtend &#123;&#10;&#10; public static String toDescription(int type) &#123;&#10; switch (type) &#123;&#10; case PermissionsType.READ_PHONE_STATE_CODE:&#10; return &#34;&#38656;&#35201;&#22312;&#31995;&#32479;&#8220;&#26435;&#38480;&#8221;&#20013;&#25171;&#24320;&#8220;&#30005;&#35805;&#8221;&#24320;&#20851;&#65292;&#25165;&#33021;&#26356;&#22909;&#30340;&#20026;&#20320;&#26381;&#21153;&#34;;&#10; case PermissionsType.CAMERA_CODE:&#10; return &#34;&#38656;&#35201;&#22312;&#31995;&#32479;&#8220;&#26435;&#38480;&#8221;&#20013;&#25171;&#24320;&#8220;&#30456;&#26426;&#8221;&#24320;&#20851;&#65292;&#25165;&#33021;&#30456;&#26426;&#25293;&#29031;&#34;;&#10; case PermissionsType.WRITE_EXTERNAL_STORAGE_CODE:&#10; return &#34;&#38656;&#35201;&#22312;&#31995;&#32479;&#8220;&#26435;&#38480;&#8221;&#20013;&#25171;&#24320;&#8220;&#23384;&#20648;&#8221;&#24320;&#20851;&#65292;&#25165;&#33021;&#31163;&#32447;&#32531;&#23384;&#34;;&#10; default:&#10; return &#34;&#38656;&#35201;&#22312;&#31995;&#32479;&#8220;&#26435;&#38480;&#8221;&#20013;&#25171;&#24320;&#30456;&#20851;&#26435;&#38480;&#65292;&#25165;&#33021;&#26356;&#22909;&#30340;&#20026;&#20320;&#26381;&#21153;&#34;;&#10; &#125;&#10; &#125;&#10; &#125;&#10;&#125; 准备好这两个类之后，就可以在你需要进行权限申请和控制的地方写下面的代码了：1private PermissionsChecker mPermissionsChecker; // &#26435;&#38480;&#26816;&#27979;&#22120;&#10; // &#25152;&#38656;&#30340;&#20840;&#37096;&#26435;&#38480;&#10; static final String[] PERMISSIONS = new String[] &#123;&#10; android.Manifest.permission.WRITE_EXTERNAL_STORAGE&#10; &#125;;&#10;&#10; @Override protected void onCreate(Bundle savedInstanceState) &#123;&#10; super.onCreate(savedInstanceState);&#10; setContentView(R.layout.activity_movie_detail);&#10; mPermissionsChecker = new PermissionsChecker(this);&#10; &#125;&#10;&#10; if (VersionSDK.isMarshmallowOrHigher()) &#123;&#10; String[] permissions = PERMISSIONS;&#10; if (mPermissionsChecker.lacksPermissions(permissions)) &#123;&#10; requestPermissions(permissions, PermissionsType.WRITE_EXTERNAL_STORAGE_CODE);&#10; &#125; else &#123;&#10; //&#38656;&#35201;&#26435;&#38480;&#25165;&#33021;&#25805;&#20316;&#30340;&#20195;&#30721;&#10; &#125;&#10; &#125; else &#123;&#10; //&#38656;&#35201;&#26435;&#38480;&#25165;&#33021;&#25805;&#20316;&#30340;&#20195;&#30721;&#10; &#125;&#10;&#10; @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,&#10; @NonNull int[] grantResults) &#123;&#10; if (requestCode == PermissionsType.WRITE_EXTERNAL_STORAGE_CODE) &#123;&#10; for (int i = 0; i &#60; permissions.length; i++) &#123;&#10; String permission = permissions[i];&#10; int grantResult = grantResults[i];&#10;&#10; if (permission.equals(android.Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;&#10; if (grantResult == PackageManager.PERMISSION_GRANTED) &#123;&#10; movieDetailIvCache.setSelected(true);&#10; &#125; else &#123;&#10; ToastUtils.showShortToast(&#34;&#38656;&#35201;&#23384;&#20648;&#26435;&#38480;&#34;);&#10; &#125;&#10; &#125;&#10; &#125;&#10; &#125;&#10; &#125;","categories":[{"name":"Android新技术实践","slug":"Android新技术实践","permalink":"http://logan62334.github.io/categories/Android新技术实践/"}],"tags":[{"name":"Android 6.0","slug":"Android-6-0","permalink":"http://logan62334.github.io/tags/Android-6-0/"}],"keywords":[{"name":"Android新技术实践","slug":"Android新技术实践","permalink":"http://logan62334.github.io/categories/Android新技术实践/"}]},{"title":"[一周阅读清单] 开发神器推荐","slug":"一周阅读清单-开发神器推荐","date":"2016-05-22T08:11:31.000Z","updated":"2016-05-22T08:12:23.000Z","comments":true,"path":"2016/05/22/一周阅读清单-开发神器推荐/","link":"","permalink":"http://logan62334.github.io/2016/05/22/一周阅读清单-开发神器推荐/","excerpt":"","text":"『一周阅读清单』第五期与大家见面了，这周最大的新闻莫过于Google I/O 2016大会了，虽然自己没能到现场但各种现场的照片和新闻已经刷爆了朋友圈，其中比较吸引我的是Firebase、Android Instant Apps和Google Home，好了这次推荐几款开发神器。 StethoChrome的Developer Tools对于WEB开发者来讲几乎是一个神器，而Chrome Store里也有无奇不有的插件，如果Chrome能调安卓应用应该是一件美好的事，而Facebook开源的一个工具Stetho让Chrome调试android 应用不再是一个梦。安卓在调试时，有时候需要查看数据库，SharePreference等，而这个前提是必须root，另一方面，andoird的网络方面的抓包调试显得很困难，而这一切，Stetho都为我们轻轻松松地解决。除了使用android集成环境里的工具查看view树，使用Stetho也可以做到。 LeakCanary著名的开源组织 Square 开发了一套 Android 和 Java 内存泄露检测库。LeakCanary 是一个检测内存泄露的开源类库。你可以在 debug 包种轻松检测内存泄露。 Dex-Method-Countsdex-method-counts来统计包中的总体数量，使用方法很简单，只需执行下面语句即可： java -jar path\\dex-method-counts.jar path\\App.apk。 Android-Butterknife-ZeleznyAndroid Butterknife Zelezny这个插件，事实上这是个Android Studio的plugin，他可以让你在添加Butterkinfe注解时偷偷懒，直接点击几下鼠标既可以完成注解的增加，同时还是图形化的操作，可以说，大大的减轻了开发负担。尤其是当你的layout中有很多很多的view需要通过findviewbyid来获得引用时。 Android-Parcelable-Plugin手动实现Parcelable接口，往往需要写多些代码去实现，android-parcelable-plugin.可以让你几秒钟实现 Parcelable接口，让开发变得更开心。 AndroidWiFiADB你还在为在使用真机测试时，缺乏数据线而发愁吗？你还在为同事踩烂了你的一根数据线而耿耿于怀吗？（说实话我今天就被踩烂了一根） 你还在为每次用数据线连接真机测试时，都得抽拔抽拔而不耐烦吗？AndroidWiFiADB 通过WiFi 进行adb调试, 摆脱数据线。 GsonFormat这是一个根据JSONObject格式的字符串,自动生成实体类参数。 ACRAACRA是一个可以让安卓应用自动发出GoogleDoc格式崩溃报告的函数库。安卓开发者可以通过ACRA获取应用崩溃或者错误行为的数据。如果有一个崩溃发生，你的应用不会越过已有的系统崩溃提醒或者报告功能来添加用户提醒。如果使用Toast、状态提醒条或者直接对话框模式，这个“强制关闭”的对话框不会再显示，就算设备上原生系统的提醒功能开启也不能发送一个另外的报告。","categories":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/categories/一周阅读清单/"}],"tags":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/tags/一周阅读清单/"}],"keywords":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/categories/一周阅读清单/"}]},{"title":"[一周阅读清单] 在线小工具推荐","slug":"一周阅读清单-在线小工具推荐","date":"2016-05-14T16:11:17.000Z","updated":"2016-05-14T16:12:29.000Z","comments":true,"path":"2016/05/15/一周阅读清单-在线小工具推荐/","link":"","permalink":"http://logan62334.github.io/2016/05/15/一周阅读清单-在线小工具推荐/","excerpt":"","text":"『一周阅读清单』第四期与大家见面了，这周我大部分外业余时间都在看Python爬虫和JavaScript，所以今天给大家推荐一些之前收藏的实用在线小工具吧。 在线代码生成器，提高开发效率Android Layout Finder只需粘贴你的Android布局代码在第一个文本框，选择你需要的功能，就会自动生成代码。 Android KickstartR帮助您快速创建 Android应用程序并使用最流行的库进行配置。 它创建和配置你的项目给你。只专注于代码! Android Button Maker在线生成shape drawable XML代码 ，提供图形界面调试，更加直观。 Android Layout Parser工具输入你的字段的前缀，选择你的XML中的范围并点击生成，自动生成java代码。 Android资源生成分析工具Android Asset Studioicon制作（桌面icon，通知栏icon等），9patch图片制作，ActionBar样式等相关的工具。 Android Action Bar Style Generator自定义生成自己风格主题，图形化界面，直接下载相关的代码和资源。 Simple Nine-Patch Generator快速生成不同分辨率的资源。 Android Holo Colors Generator在线生成android的组件，如EditText、Radio等等，通过自定义自己的颜色风格。图形界面，简单可观。 Android Assets Viewer通过上传的自己的drawable resources，是否达到设计师的视觉效果。 Android SVG To VectorDrawable一个可以将SVG图片转换为Vector Drawable xml文件的在线工具。 计算转换工具Android Dp Px Calculatordp px 相互转换。 DP-PX-Converter自定义生成自己风格主题，图形化界面，直接下载相关的代码和资源。 Androidpixels不同分辨率下的转换数值。 PixelcalcAndroid pixel 计算器。 源码搜索引擎grepcode.com是一个Java源码搜索引擎，对于查看Android代码也不例外。并且支持多个API版本快速切换查看。如果你的IDE关联本地代码后，让机器累的喘不过气来，那么就试一试这个在线的工具吧。Grepcode支持多个API版本快速切换查看。 在线反编译当你还在花时间切换不同的反编译工具时，一个在线反编译网站应运而生，它就是Android APK Decompiler，只需上传要反编译的apk包，无需多时，源码可以下载下来了。Android APK Decompoler有两个在线反编译，简单容易，喜欢哪个用哪个。 Google Play（无需登录）由于一些你懂的原因，国内无法直接访问Google Play商店。而且下载Google Play商店还是需要登陆谷歌账户，以国内的网络，下载成功简直是太困难了。这里介绍一款不需要账户国内即可访问的Web工具。可以通过输入包名或者Google Play地址即可下载。快速下载Google Play应用下载Google Play的应用。 进制转换Android中所有的资源都有一个对应的资源ID，资源ID的类型为16进制的整数。有些时候特殊的场合处理资源ID，为了调试需要进行进制转换，比如16进制转常用的10进制。不用自己算，使用下面的工具就可以轻松搞定。进制转换在线快速转换，比如16进制转常用的10进制。 JSON格式化在CS应用中，客户端和服务器端通常使用json作为数据交换格式。当分析的时候，我们必然是将raw数据转换成可读性更高的。快来使用这个强大的工具吧。JSON格式化转成标准json格式。 API 市场收录网站各个领域的开发API，比如图片识别，语音合成，OCR等等一些生活常用的API开放接口，不需要后台也可以做一款使用的应用。API 市场图片识别，语音合成，OCR等等一些生活常用的API开放接口。 在线UML工具在线画流程图，如果你在家里用的MAC OX ,但是在公司用的是Linux ,那么导致UML图的转移不方便，这个在线的UML画图解决了一切问题。在线UML工具UML工具 、类图、流程图等等。 公开图标库国内功能很强大且图标内容很丰富的矢量图标库,提供矢量图标下载、在线存储、格式转换等功能。公开图标库设计和前端开发的便捷工具。 批量图片压缩当图片很大的时候，又不想麻烦设计师，那么这个网站很适合你，批量压缩各种图片，直接把图片拖拉进去就行。批量图片压缩批量图压缩。 RGB转换通常UI设计师都会给开花童鞋色值，当疏忽的时候，我们可以使用截图软件得到10进制的三个值，然后将其转换成色值。这里有一个便捷的RGB工具。RGB转换RGB转换。","categories":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/categories/一周阅读清单/"}],"tags":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/tags/一周阅读清单/"}],"keywords":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/categories/一周阅读清单/"}]},{"title":"[一周阅读清单] Gradle、CI、阅读、工具推荐","slug":"一周阅读清单-Gradle、CI、阅读、工具推荐","date":"2016-05-09T08:39:58.000Z","updated":"2016-05-09T08:57:11.000Z","comments":true,"path":"2016/05/09/一周阅读清单-Gradle、CI、阅读、工具推荐/","link":"","permalink":"http://logan62334.github.io/2016/05/09/一周阅读清单-Gradle、CI、阅读、工具推荐/","excerpt":"","text":"『一周阅读清单』第三期与大家见面了，上周要说最火的事件应该就是百度和莆田系医院了，网上关于这一事件的文章论点铺天盖地，同时也涌现了很多用来公示和鉴别莆田系医院的工具和插件，文末我会推荐一个Chrome浏览器插件——打开莆田系医院网站，发出警告提醒、显示医院信息。 文章fir.im weekly - 「 持续集成 」实践教程合集我们常看到许多团队和开发者分享他们的持续集成实践经验，这里收集了 iOS，Android，PHP ，NodeJS 等项目搭建持续集成的实践，以及一些国内外公司的内部持续集成系统的经验，供大家集中研究，参考借鉴。 5分钟搞定android混淆混淆是上线前很重要的一个环节（是个脑力兼体力活）Android使用的ProGuard，可以起到压缩，混淆，预检，优化的作用。这篇文章教你掌握正确的写混淆文件的姿势。 使用 MailOtto 做完美预加载Android预加载的实际案例。 Retrofit2 完全解析探索与okhttp之间的关系其底层对网络的访问默认也是基于okhttp，不过retrofit非常适合于restful url格式的请求，更多使用注解的方式提供功能。 Android N开发 你需要知道的一切Android N预览版运行是2016年3月9日，计划于2016年第三季度发布。一共有5个预览版，正常情况下，4到6个星期更新一个预览版，现在第二个预览版已经更新。在前三预览版google提供了一个测试和开发环境，你可以找出你的应用程序跟Android N系统的兼容性. 书单《深入理解Android内核设计思想》这本书从计算机操作系统的原理出发讲解了Android系统内核的设计思想，通过我们熟知的一些操作系统和网络知识来类比在Android中的应用。 《深入理解Android之Gradle》把gradle当做编程框架去学习，这样就不用每次去google如何如何配置脚本了，而且可以根据需要自己写脚本。 开源项目ExpandableLayout一个支持子view的展开与折叠的布局。 Tooltip轻量级的起泡提示。可以根据触发的位置灵活显示。 工具推荐免费翻墙镜像和工具科学上网必备。 莆田系医院网站提醒的Chrome插件本项目的意图是利用open-power-workgroup/Hospital收集汇总与国内一些医疗机构有关的信息，制作出来的一个莆田系医院网站提醒的Chrome插件，供广大寻医问药的患者及家属参考。","categories":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/categories/一周阅读清单/"}],"tags":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/tags/一周阅读清单/"}],"keywords":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/categories/一周阅读清单/"}]},{"title":"[一周阅读清单] RxAndroid、Dagger2、动态配置、小工具推荐","slug":"一周阅读清单-RxAndroid、Dagger2、动态配置、小工具推荐","date":"2016-05-01T08:52:25.000Z","updated":"2016-05-01T08:53:28.000Z","comments":true,"path":"2016/05/01/一周阅读清单-RxAndroid、Dagger2、动态配置、小工具推荐/","link":"","permalink":"http://logan62334.github.io/2016/05/01/一周阅读清单-RxAndroid、Dagger2、动态配置、小工具推荐/","excerpt":"","text":"『一周阅读清单』第二期与大家见面了，上周我去参加了中国架构师大会，后面我会将大会中的PPT下载地址贴出来分享给大家~ 文章从案例学RxAndroid开发 （上、下）上周推荐了一篇讲RxJava的好文，相信你一定很想了解RxJava如何在Android应用中使用它，这篇文章作者从实际案例出发讲解了这一实践过程。 用工厂流水线的方式来理解 RxJava 的概念RxJava 是款十分强大的工具。但不幸的是如果你之前没有通过“流”的形式写过代码你可能很难理解它并学会如何去用它。因为它十分不同于以往平常的安卓开发，所以我们需要一些比代码更形象的东西去理解它。这篇文章能帮助你更好地理解 RxJava 是如何工作的。 APP实时配置系统&amp;version=11020201&amp;pass_ticket=u%2FZBkB7zNcwIWqm7QWEqFXY9owAqv%2FNZTiIyX7eTHz21%2BNmsm0zUCP%2F9uJ0NpkS0)随着公司业务的发展，产品上经常需要对APP的逻辑进行更精准快速的变更，通过发布新版本的方式来调整逻辑已经满足不了这一需求了，所以各大公司开始实践动态配置方案，之前天猫无线团队也发表了一篇讲如何设计动态配置中心的文章。 Android：dagger2让你爱不释手这篇是滴滴出行的牛晓伟发表的一系列文章，总共三篇是目前我看到过最能把Dagger2讲的通俗易懂的文章了，看完确实爱不释手了！ Android单元测试(四)：Mock以及Mockito的使用这一系列文章很详细的讲了如何将单元测试运用到实际开发工作中，虽然很多人说在移动端做单元测试太浪费时间，蘑菇街的邹勇打了个比方我觉得挺形象的：相信很少人会说开车这件事情需要很多时间而是：1. 学习开车需要一定的时间；2. 如果路面不平的话，那么修路需要一定的时间，单元测试也是如此。 开源项目Depth-LIB-Android-一个给予view深度的library，同时也包含一些Canvas绘制技术的例子，比如波浪和噪点效果。 PLDroidPlayerPLDroidPlayer 是一个适用于 Android 平台的音视频播放器 SDK，可高度定制化和二次开发，为 Android 开发者提供了简单、快捷的接口，帮助开发者在 Android 平台上快速开发播放器应用。 agera谷歌的响应式编程框架，for Android。 小工具推荐Snapseed谷歌出品，图片后期处理利器。 Java 开发常用的在线工具对于一些简单的逻辑验证完全可以在这上面去编写运行。 最后附上中国架构师大会的PPT资料地址：http://note.youdao.com/share/?id=210afe4bc654668b08f709749b9f07d5&amp;type=note#/","categories":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/categories/一周阅读清单/"}],"tags":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/tags/一周阅读清单/"}],"keywords":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/categories/一周阅读清单/"}]},{"title":"[一周阅读清单] RxJava、Gradle、动态化、小工具推荐","slug":"一周阅读清单-RxJava、Gradle、动态化、小工具推荐","date":"2016-04-23T17:59:24.000Z","updated":"2016-04-24T10:14:31.000Z","comments":true,"path":"2016/04/24/一周阅读清单-RxJava、Gradle、动态化、小工具推荐/","link":"","permalink":"http://logan62334.github.io/2016/04/24/一周阅读清单-RxJava、Gradle、动态化、小工具推荐/","excerpt":"","text":"文章给Android开发者的RxJava详解其实网上有很多讲RxJava系列的文章但是对于Android开发者来说大部分都不能很清楚的讲明白什么是RxJava以及如何在Android中应用，这篇文章给以上问题做了一个很好的回答，值得一读。 用Retrofit 2简化HTTP请求这篇文章是Jake Wharton在Droidcon NYC 2015上的一次演讲，他很好的讲解了Retrofit的发展历史以及原理和应用。 团队中的Git实践这篇文章非常值得一读，讲解了在多人团队开发过程中需要注意的一些细节和概念。 关于Android 进程保活，你所需要知道的一切这篇文章比较全面的讲解了Android做进程保活的一些场景和对应的方案。 包建强：为什么我说Android插件化从入门到放弃？最近冒出了很多从入门到XX的书籍，哈哈 不过这篇文章是川哥的一篇采访录，文中包老师讲了些他自己对于Android插件化的一些看法，读后对插件化的概念和发展有了新的认识。 Growth: 全栈增长工程师指南这篇文章适合对全栈工程师感兴趣的同学阅读，用来科普比较不错。 GRADLE构建最佳实践这是阿里一位朋友写的，现在网上太多讲gradle的文章了，这篇是看下来感觉比较接地气而且很系统的讲了gradle的一些实用方法。 开源项目Facebook开源的Redex工具包FB最近放出了很多优秀的开源项目，总是能让人兴奋其中这个Redex是用来压缩和优化apk的，至于详细的实践过程可以参考我的上篇文章[Android] Facebook Redex 压缩优化Apk实践。 RealmRealm，为移动设备而生 替代 SQLite 和 Core Data。为你省下数周的时间和数千行的代码，帮你创造出更棒的用户体验。正如他官网所描述的又是一个杀手级插件。 Weex阿里对动态化的又一实践，这次阿里为了避免再出现开源项目无人维护的尴尬场景，于是这次像发布一个产品一样去发布了Weex，Weex支持iOS、安卓、YunOS及Web等多端部署，现已经开放内侧到6月份开源。 小工具推荐nearlock这是一款通过蓝牙自动检测距离来锁定解锁mac电脑的应用，亲测很好使不过只有付费版才支持后台运行。 AndroidWiFiADB这是AS上的一个插件可以帮助你实现无线调试。","categories":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/categories/一周阅读清单/"}],"tags":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/tags/一周阅读清单/"}],"keywords":[{"name":"一周阅读清单","slug":"一周阅读清单","permalink":"http://logan62334.github.io/categories/一周阅读清单/"}]},{"title":"[Android] Facebook Redex 压缩优化Apk实践","slug":"Android-Facebook-Redex-压缩优化Apk实践","date":"2016-04-16T05:29:11.000Z","updated":"2016-08-19T02:46:54.000Z","comments":true,"path":"2016/04/16/Android-Facebook-Redex-压缩优化Apk实践/","link":"","permalink":"http://logan62334.github.io/2016/04/16/Android-Facebook-Redex-压缩优化Apk实践/","excerpt":"","text":"最近Facebook 又放出了一个用于Android apk字节码优化的工具包——redex，经过redex的优化apk会变的体积更小，速度更快。至于原理大家可以到https://code.facebook.com/posts/1480969635539475/optimizing-android-bytecode-with-redex这个网站去看，今天我想分享一下具体的实践过程。 前两天刚看到FB放出的这个工具包就迫不及待的去尝试了下，结果一直报下面这个错误：1configure: error: Please install double-conversion library 但其实这些library都已经安装好了的，那天倒腾了好久也跟群里的朋友交流过，感觉应该是FB的一个小bug于是去github上提了issue，果然第二天得到了回应官方更新了使用说明。下面是我在Mac OS X上的实践过程： 1、首先需要你的Xcode安装了命令行工具： 1xcode-select --install 2、利用homebrew安装依赖包： 1brew install autoconf automake libtool python3&#160;&#10;brew install boost double-conversion gflags glog libevent openssl&#160;&#10;brew link openssl --force 3、通过Git将redex的源码checkout到电脑上： 1git clone https://github.com/facebook/redex.git&#160;&#10;cd redex&#160;&#10;git submodule update --init 4、通过autoconf和make来构建redex： 1autoreconf -ivf &#38;&#38; ./configure &#38;&#38; make&#160;&#10;sudo make install 在执行步骤四的时候就出现了问题：1configure: error: Please install google-gflags library&#160;&#10;configure: error: ./configure failed for third-party/folly/folly 于是我又提了issue，下面是跟沟通的过程：按照他的方法执行下面的命令： 1xcode-select --install&#160;&#10;sudo xcode-select --switch /Library/Developer/CommandLineTools/ 再执行步骤四就OK了当然如果看到很多warn也不用担心，最终可以编译通过。接下来就可以通过redex执行最后的优化命令了： 1redex path/to/your.apk -o path/to/output.apk 不过这里又出现了个问题：又是环境问题😂 ,下面是配置过程：1mafeideAir:~ mafei$ vi ~/.bash_profile&#160;&#10;export PATH=/Users/mafei/Development/adt-bundle-mac-x86_64-20140702/sdk/build-tools/23.0.2:$PATH 因为这个是系统只读文件所以退出的时候要输入!wq才行这下执行下面的命令就完全没问题啦！ 1mafeideAir:~ mafei$ cd GitHub/&#10;mafeideAir:GitHub mafei$ cd redex/&#10;mafeideAir:redex mafei$ redex metis_release_v1.0.2.apk -o out.apk 刚刚又去看了下redex的官网发现FB已经把这几天遇到的一些典型问题都汇总了一下：","categories":[{"name":"Android新技术实践","slug":"Android新技术实践","permalink":"http://logan62334.github.io/categories/Android新技术实践/"}],"tags":[{"name":"Android redex","slug":"Android-redex","permalink":"http://logan62334.github.io/tags/Android-redex/"}],"keywords":[{"name":"Android新技术实践","slug":"Android新技术实践","permalink":"http://logan62334.github.io/categories/Android新技术实践/"}]},{"title":"[Android] 防止连续点击打开两个重复页面的小技巧","slug":"Android-防止连续点击打开两个重复页面的小技巧","date":"2016-04-12T15:00:28.000Z","updated":"2016-04-14T11:08:49.000Z","comments":true,"path":"2016/04/12/Android-防止连续点击打开两个重复页面的小技巧/","link":"","permalink":"http://logan62334.github.io/2016/04/12/Android-防止连续点击打开两个重复页面的小技巧/","excerpt":"","text":"我们在开发APP的过程中经常会遇到在某些低端机或者在机器响应比较慢的情况下手抖连续点击某个页面（当然不排除有些人故意这么做）重复弹出好几个相同的页面，不过我发现微信这样的应用都没有做处理……但还是要分享一下我是怎么解决的。 1、通过判断两次点击的时间间隔来防止重复点击工具类：1 /**&#10; * Created by mafei on 15/12/8.&#10; */&#10;public class NoDoubleClickUtils &#123;&#10; private static long lastClickTime;&#10; private final static int SPACE_TIME = 500;&#10;&#10; public static void initLastClickTime() &#123;&#10; lastClickTime = 0;&#10; &#125;&#10;&#10; public synchronized static boolean isDoubleClick() &#123;&#10; long currentTime = System.currentTimeMillis();&#10; boolean isClick2;&#10; if (currentTime - lastClickTime &#62;&#10; SPACE_TIME) &#123;&#10; isClick2 = false;&#10; &#125; else &#123;&#10; isClick2 = true;&#10; &#125;&#10; lastClickTime = currentTime;&#10; return isClick2;&#10; &#125;&#10;&#125; 使用方式：1/**&#10; * &#28857;&#20987;&#20107;&#20214;&#10; */&#10; private View.OnClickListener logListener = new View.OnClickListener() &#123;&#10; @Override&#10; public void onClick(View view) &#123;&#10; if (!NoDoubleClickUtils.isDoubleClick()) &#123;&#10; &#20107;&#20214;&#21709;&#24212;&#26041;&#27861;&#10; &#125;&#10; &#125;&#10; &#125;; 2、通过修改manifest中页面的launchMode属性改为单例模式1&#60;!-- &#24066;&#22330;&#32593;&#36151;&#20135;&#21697;&#39029; --&#62;&#10; &#60;activity&#10; android:name=&#34;.activity.market.CreditRecordActivity&#34;&#10; android:launchMode=&#34;singleTask&#34;&#10; android:screenOrientation=&#34;portrait&#34; /&#62; 3、利用RxBinding实现防重复点击RxBinding 是 Jake Wharton 的一个开源库，它提供了一套在 Android 平台上的基于 RxJava 的 Binding API。1RxView.clickEvents(button)&#10; .throttleFirst(500, TimeUnit.MILLISECONDS)&#10; .subscribe(clickAction);","categories":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}],"tags":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/tags/Android笔记/"}],"keywords":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}]},{"title":"[Android] 移动开发技术周报 #198","slug":"Android-移动开发技术周报-198","date":"2016-04-03T10:18:35.000Z","updated":"2016-04-14T11:12:02.000Z","comments":true,"path":"2016/04/03/Android-移动开发技术周报-198/","link":"","permalink":"http://logan62334.github.io/2016/04/03/Android-移动开发技术周报-198/","excerpt":"","text":"最近在浏览各大技术类资讯平台的时候发现Android Weekly是目前感觉在质量和时效性上都比较不错的平台，有兴趣的同学可以去http://androidweekly.net/ 订阅，但同时有了一个想法因为这个网站每次推送的都是纯英文版，说实话我一开始也是有点不太习惯因为阅读速度一下慢了好多，于是我打算试着去每周翻译一刊他们的推文希望可以为一些英文不太好但特别喜欢Android的同学带来些帮助，让大家可以快速了解目前的Android技术动态。 文章&amp;学习指南使用Design Support Library中的Bottom Sheets随着时间的推移Design support library在被慢慢的改善，在23.2版本中增加了对Bottom Sheets的支持，在本文中你将很轻松的学会如果在你的应用中实现Bottom Sheets。Android Thread Annotations的缺点当像@UiThread和@WorkerThread这样的Android thread annotations被发布的时候，Michael Comella 很兴奋，然后许多个月过后他发现这种注解并没有像他所希望的那样有效果但又不知道为什么，于是他决定研究一下。AutoValue Extensions谷歌的AutoValue库在即将发布的extensions中提供了简单的值类型，这个演讲介绍了这个扩展的功能，囊括了对Android有用的扩展并且在构建你自己的应用中提供一些建议。Vectors这是偶然在第三方平台上看到的一个关于Android VectorDrawable的支持包,另外Google发布了Android 23.2支持库,其中包含了备受期待的VectorDrawableCompat。五种很少有人知道的会阻塞主线程的情况一般来说，任何方法的调用导致主线程阻塞时间超过16*N毫秒都会引起掉帧。我们称这种方法为阻塞方法。在这篇文章中，我们将首先看一个阻塞方法的例子，然后再看五个阻塞主线程的方式。开源的Android LightCycleSoundCloud最近开源了LightCycle，LightCycle是一个Android库有助于把Activity和Fragment中的逻辑拆分成小的代码块。在Airbnb的Android版中采用RxJava这个演讲中分享了Airbnb采用这些新模式和技术的经验，以及遇到的困难和坑。第一个五年Mark Allison通过每周写很有深度的文章来跟我们分享他的Android知识，请一定要在Twitter或者G +上感谢他。RxJava的一些问题Thomas Nield写了一些在使用RxJava中你可能会遇到的一些问题 赞助Buddybuild：世界上第一个移动的持续集成平台Buddybuild是一个移动的持续集成和部署平台，只需要几分钟设置。我们的SDK使用户能够无比轻松地实时获取用户的反馈和崩溃报告。不用再维护不同的构建、部署、崩溃报告和反馈系统。专注于自己最擅长的：创建人们喜爱的应用程序。Hired—Android开发者的招聘平台国外版的100Offer LIBRARIES &amp; CODELightcycleMaterialColorsAppMaterialColorsApp 是一个方便的Mac小应用程序，让您可以快速访问标准的材料设计调色板。LandscapeVideoCamera非常强大的android 视频录制库，可以选择视频尺寸以及视频质量，只允许横屏录制。 新闻Android Experiments I/O 挑战赛去年夏天谷歌开发者社区启动了 Android Experiments ：一个用于展示创新性 Android 作品的项目。所有开发者都可以提交你的创意作品，通过后将加入到网站收录中。Fragmented Podcast 更新了 – TSHIRTS!发布限量版的Fragmented T-ShirtAndroid Studio 2.1 Preview 4 可用了Google在canary渠道推送了Android Studio 2.1 Preview 4，修复了很多bug。 工具Google新的 Accessibility Scanner全新的Accessibility Scanner应用程序允许你检查潜在的问题从而改进你的应用程序。它在Play商店免费下载，但目前它仅限于Android 6.0设备。","categories":[{"name":"Android移动开发技术周报","slug":"Android移动开发技术周报","permalink":"http://logan62334.github.io/categories/Android移动开发技术周报/"}],"tags":[{"name":"Android移动开发技术周报","slug":"Android移动开发技术周报","permalink":"http://logan62334.github.io/tags/Android移动开发技术周报/"}],"keywords":[{"name":"Android移动开发技术周报","slug":"Android移动开发技术周报","permalink":"http://logan62334.github.io/categories/Android移动开发技术周报/"}]},{"title":"西瓜理财APP开源库的使用","slug":"Android-西瓜理财APP开源库的使用","date":"2016-03-29T15:15:55.000Z","updated":"2016-04-14T11:09:47.000Z","comments":true,"path":"2016/03/29/Android-西瓜理财APP开源库的使用/","link":"","permalink":"http://logan62334.github.io/2016/03/29/Android-西瓜理财APP开源库的使用/","excerpt":"","text":"接着上篇说，在Android开发过程中，我们经常会遇到是否需要自己造轮子的问题，我个人认为在开发周期有限人员配置有限的情况下，还是多参考些开源库比较好，在时间空闲的时候也鼓励大家为开源事业贡献一部分自己的力量当然看个人喜好啦~接下来讲讲在开发西瓜理财APP的过程中是如何使用和寻找开源库的。 在讲之前首先学会如何科学的上网，这里我想说一下网上有很多教程和工具教你如何姿势正确的上网例如赛风、ShadowsocksX等但是经常会出现连接不稳定而且最重要的是要想稳定连接必须付费！其实这里有个简单实用的技巧可以轻松访问国外网站：修改本机的hosts。这里推荐一个地址：http://htcui.com/4938.html 这里会定期更新，有点遗憾就是不能看YouTube视频但是网站可以访问，不过对于我们开发来说已经足够了。 常用的网站1、https://github.com/这个就不多说了，没注册的赶紧去注册！2、http://www.jcodecraeer.com/plus/list.php?tid=31泡在网上的日子这个网站也分享了很多优秀的开源项目，而且都带有效果图3、http://www.mobile-open.com/这个网站根据不同类型和用途分的很细，Android和IOS都有4、http://android-arsenal.com/Android军械库，顾名思义各种神器任你挑任你选5、http://www.23code.com/这个也是定期会更新一批好的开源项目6、http://p.codekk.com/codekk的开源项目集合 这样的网站太多了，最后分享两个各种API服务的聚合网站1、http://www.devstore.cn/2、http://apistore.baidu.com/ 最后讲讲使用开源库应该注意的一些地方1、选择开源库的时候一定不要选择那些已经停止更新的库，尽量选择star和fork人数多的库，并且还在更新中。 2、有些开源项目虽然很好但是功能太多如果直接引入，会带来太多不必要的代码从而增大apk大小，所以建议是先学习一下然后提取对自己有用的那一部分。 3、如果自己的工程中引入了太多的开源库，那么建议在公司自己的服务器上搭建一套私服环境，通过gradle和Nexus搭配这样会使编译速度加快许多因为不用每次到外网去下载这些开源库了。 4、一个项目中不要引入过多的开源库，引入的过多会使编译变慢，apk包变大，编译冲突等问题。 另外希望大家能够将自己使用开源库的心得和遇见的问题贡献出来互相学习！","categories":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}],"tags":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/tags/Android笔记/"}],"keywords":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}]},{"title":"西瓜理财APP用到的开源库和工具整理","slug":"西瓜理财APP用到的开源库和工具整理","date":"2016-03-17T14:08:15.000Z","updated":"2016-04-14T11:08:56.000Z","comments":true,"path":"2016/03/17/西瓜理财APP用到的开源库和工具整理/","link":"","permalink":"http://logan62334.github.io/2016/03/17/西瓜理财APP用到的开源库和工具整理/","excerpt":"","text":"今天来聊聊我之前负责过的一款APP——西瓜理财Android版本所用到的一些开源库和开发工具，不过由于微信公众号不支持外链所以就不贴地址了。 Android studio 插件1、Android ButterKnife Zelezny这是著名的Jake Wharton黄油刀插件，用过的都说好，连注解都不用亲自写了，效率直线提升。2、GsonFormat这个插件可以将mobileapi返回的json数据直接转换为实体类，省去了我们写一大堆的字段属性和Getter、Setter方法所花费的时间。3、Android Parcelable code generator大家如果用到Parcelable来序列化实体类的话，将会面临比Serializable复杂的多的步骤所以通过使用这个插件来帮我们一键生成对应的方法。另外：需要注意的是当有新的属性加入的时候记得重新生成一次不然会出现序列化错误。4、.ignore这个是配合Git控制来忽略一些本地配置文件和不需要同步的代码文件。5、Genymotion这个就不必多说了，用过的都说好。 第三方库1、Nuwa最近议论最多的热修复框架，这只是其中一种实现方案。2、Umeng用来做APP统计分析的平台，不过建议大家以后可以考虑阿里最近推出的移动应用数据分析平台。3、诸葛IO一款精细化数据分析的工具，重点在移动用户行为分析不过由于后期数据激增开始收费了所以放弃了。4、Cobub Razor号称私有版的友盟，因为考虑到友盟统计的数据不太能真实反映用户情况，所以我们决定搭建一套自己的数据采集分析系统但考虑到时间成本所以采用了这个开源项目，省去了设计各种上传策略的时间。5、极光推送这个要说一点的是注意官网的各种cpu架构下的so文件更新，一定要全都加入工程不然会在个别机型上报本地库加载异常的错误。6、Fresco这个是Facebook最近推出的一款图片加载框架，对OOM的问题做了特殊优化。7、sharesdk第三方分享首选8、ButterKnife都说程序员都是比较懒的，什么事情都想着让程序自动化帮忙减轻工作量，这个开源库可以让我们从大量的findViewById()和setonclicktListener()解放出来，最令人兴奋的是其对性能的影响微乎其微！9、Gson谷歌GSON这个Java类库可以把Java对象转换成JSON，也可以把JSON字符串转换成一个相等的Java对象。Gson支持任意复杂Java对象包括没有源代码的对象。10、EventBus在编程过程中，当我们想通知其他组件某些事情发生时，我们通常使用观察者模式，正是因为观察者模式非常常见，所以在jdk1.5中已经帮助我们实现了观察者模式，我们只需要简单的继承一些类就可以快速使用观察者模式，在Android中也有一个类似功能的开源库EventBus，可以很方便的帮助我们实现观察者模式，另外注意：EventBus有好几款开源库，github上有人专门做过对比各个库的优缺点大家可以参考。11、NetroidNetroid是一个基于Volley实现的Android Http库，提供执行网络请求、缓存返回结果、批量图片加载、大文件断点下载的常见Http交互功能，致力于避免每个项目重复开发基础Http功能，实现显著地缩短开发周期的愿景。12、腾讯X5浏览内核腾讯X5浏览服务由QQ浏览器团队出品，致力于优化移动端webview体验的整套解决方案，使用QQ浏览器X5内核SDK和X5云端服务，解决移动端webview使用过程中出现的一切问题，优化用户的浏览体验，同时腾讯还将持续提供后续的更新和优化，为开发者提供最新最优秀的功能和服务。 其他开发工具1、蒲公英其实这种应用内侧分发的平台很多，之所以选蒲公英是因为他有mac版的客户端上传比较方便，而且还有对于的gradle代码用来实现自动化打包发布。2、Charles这个是一款功能比较强大的抓包工具，在跟mobileapi对接和测试中非常高效。3、LeakCanary强烈推荐，帮助你在开发阶段方便的检测出内存泄露的问题，使用起来更简单方便。4、Logger让开发调试效率提高至少300%而且心情愉悦的Log神器。 结语今天就写到这里吧，以后会定期推荐一些好的开源库和工具，详情戳公众号的菜单栏。","categories":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}],"tags":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/tags/Android笔记/"}],"keywords":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}]},{"title":"西瓜小贴士图片浏览功能实现思路","slug":"Android-西瓜小贴士图片浏览功能实现思路","date":"2016-03-07T15:04:02.000Z","updated":"2016-04-14T11:14:04.000Z","comments":true,"path":"2016/03/07/Android-西瓜小贴士图片浏览功能实现思路/","link":"","permalink":"http://logan62334.github.io/2016/03/07/Android-西瓜小贴士图片浏览功能实现思路/","excerpt":"","text":"最近翻到前段时间的一版设计稿，如下图这样的一个效果，当时都已经实现了但后来由于需求变更所以……没能让它和广大用户见面，但感觉这种效果还是不错的所以拿出来分享一下。 功能需求1、右上角是页数指示器2、左右两个操作按钮要求触摸时时消失3、可以左右滑动 实现思路1、图片预存在本地通过Fresco来加载2、滑动效果通过ViewPager+fragment实现 MainActivity.java 1public class MainActivity extends AppCompatActivity &#123;&#10;&#10; private static final Integer[] IMAGES = new Integer[] &#123;&#10; R.mipmap.tip1,R.mipmap.tip2,R.mipmap.tip3,R.mipmap.tip4,R.mipmap.tip5,R.mipmap.tip6,R.mipmap.tip7,R.mipmap.tip8&#10; &#125;;&#10;&#10; @Override&#10; protected void onCreate(Bundle savedInstanceState) &#123;&#10; super.onCreate(savedInstanceState);&#10; setContentView(R.layout.activity_main);&#10; Fresco.initialize(this);&#10;&#10; final ViewPager pager = (ViewPager) findViewById(R.id.pager);&#10; PageIndicator mPageIndicator= (PageIndicator) findViewById(R.id.indicator);&#10; ImageView ivLeft= (ImageView) findViewById(R.id.ivLeft);&#10; ImageView ivRight= (ImageView) findViewById(R.id.ivRight);&#10;&#10; ivLeft.setOnClickListener(new View.OnClickListener() &#123;&#10; @Override&#10; public void onClick(View v) &#123;&#10; pager.setCurrentItem(pager.getCurrentItem()-1);&#10; &#125;&#10; &#125;);&#10; ivRight.setOnClickListener(new View.OnClickListener() &#123;&#10; @Override&#10; public void onClick(View v) &#123;&#10; pager.setCurrentItem(pager.getCurrentItem()+1);&#10; &#125;&#10; &#125;);&#10;&#10;&#10; SlidePagerAdapter pagerAdapter =&#10; new SlidePagerAdapter(getSupportFragmentManager());&#10;&#10; // set pictures&#10; pagerAdapter.addAll(Arrays.asList(IMAGES));&#10;&#10; pager.setAdapter(pagerAdapter);&#10; pager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;&#10; @Override&#10; public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;&#10;&#10; &#125;&#10;&#10; @Override&#10; public void onPageSelected(int position) &#123;&#10;&#10; &#125;&#10;&#10; @Override&#10; public void onPageScrollStateChanged(int state) &#123;&#10;&#10; &#125;&#10; &#125;);&#10;&#10; mPageIndicator.setViewPager(pager);&#10; &#125; SlidePageFragment.java 1public class SlidePageFragment extends Fragment &#123;&#10; private static final String PIC_URL = &#34;slidepagefragment.picurl&#34;;&#10;&#10; public static SlidePageFragment newInstance(@NonNull final int picUrl) &#123;&#10; Bundle arguments = new Bundle();&#10; arguments.putInt(PIC_URL, picUrl);&#10;&#10; SlidePageFragment fragment = new SlidePageFragment();&#10; fragment.setArguments(arguments);&#10;&#10; return fragment;&#10; &#125;&#10;&#10; @Override&#10; public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,&#10; @Nullable Bundle savedInstanceState) &#123;&#10; View rootView = inflater.inflate(R.layout.fragment_slide_page, container, false);&#10;&#10; SimpleDraweeView view = (SimpleDraweeView) rootView.findViewById(R.id.pic);&#10;&#10; Bundle arguments = getArguments();&#10; if (arguments != null) &#123;&#10; int url = arguments.getInt(PIC_URL);&#10; view.setBackgroundResource(url);&#10; &#125;&#10;&#10; return rootView;&#10; &#125;&#10;&#125; SlidePagerAdapter.java 1public class SlidePagerAdapter extends FragmentStatePagerAdapter &#123;&#10; private List&#60;Integer&#62; picList = new ArrayList&#60;&#62;();&#10;&#10; public SlidePagerAdapter(FragmentManager fm) &#123;&#10; super(fm);&#10; &#125;&#10;&#10; @Override&#10; public Fragment getItem(int i) &#123;&#10; return SlidePageFragment.newInstance(picList.get(i));&#10; &#125;&#10;&#10; @Override&#10; public int getCount() &#123;&#10; return picList.size();&#10; &#125;&#10;&#10; public void addAll(List&#60;Integer&#62; picList) &#123;&#10; this.picList = picList;&#10; &#125;&#10;&#125; 详细文件请访问：https://github.com/logan62334/Gallery","categories":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}],"tags":[{"name":"Android 图片浏览","slug":"Android-图片浏览","permalink":"http://logan62334.github.io/tags/Android-图片浏览/"}],"keywords":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}]},{"title":"Android冷启动时间优化","slug":"Android-冷启动时间优化","date":"2016-03-03T05:12:49.000Z","updated":"2016-04-14T11:09:23.000Z","comments":true,"path":"2016/03/03/Android-冷启动时间优化/","link":"","permalink":"http://logan62334.github.io/2016/03/03/Android-冷启动时间优化/","excerpt":"","text":"冷启动时间是指当用户点击你的app那一刻到系统调用Activity.onCreate()之间的时间段。在这个时间段内，WindowManager会先加载app主题样式中的windowBackground做为app的预览元素，然后再真正去加载activity的layout布局，而通常情况下这个默认背景是黑色或者白色所以如果不加以优化会让用户感觉到app很卡很慢。 知道了Android冷启动时间的原理之后，就可以通过一些小技巧来对冷启动时间进行优化，从而让你app加载变得”快“一些（视觉体验上的快）。我是通过使用app闪屏页的图片来做为windowBackground这样可以传达企业的形象。 1、为启动的Activity自定义一个Theme 1&#60;style name=&#34;AppTheme.Launcher&#34;&#62;&#10; &#60;item name=&#34;android:windowBackground&#34;&#62;@drawable/window_background&#60;/item&#62;&#10;&#60;/style&#62; 2、将新的Theme应用到设置到 AndroidManifest.xml 中 1&#60;activity&#10; android:name=&#34;.MainActivity&#34;&#10; android:theme=&#34;@style/AppTheme.Launcher&#34;&#62;&#10; &#60;intent-filter&#62;&#10; &#60;action android:name=&#34;android.intent.action.MAIN&#34; /&#62;&#10; &#60;category android:name=&#34;android.intent.category.LAUNCHER&#34; /&#62;&#10; &#60;/intent-filter&#62;&#10;&#60;/activity&#62; 3、由于给MainActivity设置了一个新的Theme，这样做会覆盖原来的Theme，所以在MainActivity中需要设置回原来的Theme 1public class MainActivity extends AppCompatActivity &#123;&#10; @Override&#10; protected void onCreate(Bundle savedInstanceState) &#123;&#10; // Make sure this line comes before calling super.onCreate().&#10; setTheme(R.style.AppTheme);&#10; super.onCreate(savedInstanceState);&#10; &#125;&#10;&#125; 最后推荐大家一个开源项目也是用来实现冷启动优化的不过是MaterialDesign风格的：https://github.com/DreaminginCodeZH/MaterialColdStart","categories":[{"name":"Android新技术实践","slug":"Android新技术实践","permalink":"http://logan62334.github.io/categories/Android新技术实践/"}],"tags":[{"name":"Android 冷启动 启动黑屏","slug":"Android-冷启动-启动黑屏","permalink":"http://logan62334.github.io/tags/Android-冷启动-启动黑屏/"}],"keywords":[{"name":"Android新技术实践","slug":"Android新技术实践","permalink":"http://logan62334.github.io/categories/Android新技术实践/"}]},{"title":"Android应用崩溃(Crash)日志报告","slug":"Android-应用崩溃-Crash-日志报告","date":"2016-03-02T04:19:39.000Z","updated":"2016-04-14T11:09:28.000Z","comments":true,"path":"2016/03/02/Android-应用崩溃-Crash-日志报告/","link":"","permalink":"http://logan62334.github.io/2016/03/02/Android-应用崩溃-Crash-日志报告/","excerpt":"","text":"我们在开发应用的过程中不可避免的会遇到各种Crash，今天分享一下如何姿势正确的处理这些Crash来提高我们的开发效率。 对于应用的Crash处理分为测试环境和生产环境。 1、测试环境在开发过程中为了方便快速定位崩溃所发生的代码，要求我们能在崩溃的同时将日志打印出来，最好以直观的界面显示。这里推荐大家一个开源项目：CustomActivityOnCrashgithub地址：https://github.com/Ereza/CustomActivityOnCrash 2、生产环境当应用发布上线就不能给用户显示这样的界面了所以要用一种用户比较能接受的方式处理。在Application类中配置如下： 1/**&#10; * &#21021;&#22987;&#21270;&#31243;&#24207;&#23849;&#28291;&#25429;&#25417;&#22788;&#29702;&#10; */&#10; protected void initCrashHandler() &#123;&#10; if (BuildConfig.isDebug) &#123;&#10; CustomActivityOnCrash.install(this);&#10; &#125; else &#123;&#10; CrashHandler handler = CrashHandler.getInstance();&#10; handler.init(getApplicationContext());&#10; Thread.setDefaultUncaughtExceptionHandler(handler);&#10; &#125;&#10; &#125; CrashHandler类文件： 1 public class CrashHandler implements UncaughtExceptionHandler &#123;&#10; /** Debug Log tag*/&#10; public static final String TAG = &#34;CrashHandler&#34;;&#10; /** &#26159;&#21542;&#24320;&#21551;&#26085;&#24535;&#36755;&#20986;,&#22312;Debug&#29366;&#24577;&#19979;&#24320;&#21551;,&#10; * &#22312;Release&#29366;&#24577;&#19979;&#20851;&#38381;&#20197;&#25552;&#31034;&#31243;&#24207;&#24615;&#33021;&#10; * */&#10; public static final boolean DEBUG = false;&#10; /** &#31995;&#32479;&#40664;&#35748;&#30340;UncaughtException&#22788;&#29702;&#31867; */&#10; private UncaughtExceptionHandler mDefaultHandler;&#10; /** CrashHandler&#23454;&#20363; */&#10; private static CrashHandler INSTANCE;&#10; /** &#31243;&#24207;&#30340;Context&#23545;&#35937; */&#10; private Context mContext;&#10; /** &#20351;&#29992;Properties&#26469;&#20445;&#23384;&#35774;&#22791;&#30340;&#20449;&#24687;&#21644;&#38169;&#35823;&#22534;&#26632;&#20449;&#24687;*/&#10; private Properties mDeviceCrashInfo = new Properties();&#10; private static final String VERSION_NAME = &#34;versionName&#34;;&#10; private static final String VERSION_CODE = &#34;versionCode&#34;;&#10; private static final String STACK_TRACE = &#34;STACK_TRACE&#34;;&#10; /** &#38169;&#35823;&#25253;&#21578;&#25991;&#20214;&#30340;&#25193;&#23637;&#21517; */&#10; private static final String CRASH_REPORTER_EXTENSION = &#34;.cr&#34;;&#10;&#10; /** &#20445;&#35777;&#21482;&#26377;&#19968;&#20010;CrashHandler&#23454;&#20363; */&#10; private CrashHandler() &#123;&#125;&#10;&#10; /** &#33719;&#21462;CrashHandler&#23454;&#20363; ,&#21333;&#20363;&#27169;&#24335;*/&#10; public static CrashHandler getInstance() &#123;&#10; if (INSTANCE == null) &#123;&#10; INSTANCE = new CrashHandler();&#10; &#125;&#10; return INSTANCE;&#10; &#125;&#10;&#10; /**&#10; * &#21021;&#22987;&#21270;,&#27880;&#20876;Context&#23545;&#35937;,&#10; * &#33719;&#21462;&#31995;&#32479;&#40664;&#35748;&#30340;UncaughtException&#22788;&#29702;&#22120;,&#10; * &#35774;&#32622;&#35813;CrashHandler&#20026;&#31243;&#24207;&#30340;&#40664;&#35748;&#22788;&#29702;&#22120;&#10; * @param ctx&#10; */&#10; public void init(Context ctx) &#123;&#10; mContext = ctx;&#10; mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();&#10; Thread.setDefaultUncaughtExceptionHandler(this);&#10; &#125;&#10;&#10; /**&#10; * &#24403;UncaughtException&#21457;&#29983;&#26102;&#20250;&#36716;&#20837;&#35813;&#20989;&#25968;&#26469;&#22788;&#29702;&#10; */&#10; @Override&#10; public void uncaughtException(Thread thread, Throwable ex) &#123;&#10; if (!handleException(ex) &#38;&#38; mDefaultHandler != null) &#123;&#10; //&#22914;&#26524;&#29992;&#25143;&#27809;&#26377;&#22788;&#29702;&#21017;&#35753;&#31995;&#32479;&#40664;&#35748;&#30340;&#24322;&#24120;&#22788;&#29702;&#22120;&#26469;&#22788;&#29702;&#10; mDefaultHandler.uncaughtException(thread, ex);&#10; &#125; else &#123;&#10; //Sleep&#19968;&#20250;&#21518;&#32467;&#26463;&#31243;&#24207;&#10; try &#123;&#10; Thread.sleep(5000);&#10; &#125; catch (InterruptedException e) &#123;&#10; Log.e(TAG, &#34;Error : &#34;, e);&#10; &#125;&#10; android.os.Process.killProcess(android.os.Process.myPid());&#10; System.exit(10);&#10; &#125;&#10; &#125;&#10;&#10; /**&#10; * &#33258;&#23450;&#20041;&#38169;&#35823;&#22788;&#29702;,&#25910;&#38598;&#38169;&#35823;&#20449;&#24687;&#10; * &#21457;&#36865;&#38169;&#35823;&#25253;&#21578;&#31561;&#25805;&#20316;&#22343;&#22312;&#27492;&#23436;&#25104;.&#10; * &#24320;&#21457;&#32773;&#21487;&#20197;&#26681;&#25454;&#33258;&#24049;&#30340;&#24773;&#20917;&#26469;&#33258;&#23450;&#20041;&#24322;&#24120;&#22788;&#29702;&#36923;&#36753;&#10; * @param ex&#10; * @return true:&#22914;&#26524;&#22788;&#29702;&#20102;&#35813;&#24322;&#24120;&#20449;&#24687;;&#21542;&#21017;&#36820;&#22238;false&#10; */&#10; private boolean handleException(Throwable ex) &#123;&#10; if (ex == null) &#123;&#10; Log.w(TAG, &#34;handleException --- ex==null&#34;);&#10; return true;&#10; &#125;&#10; final String msg = ex.getLocalizedMessage();&#10; if(msg == null) &#123;&#10; return false;&#10; &#125;&#10; //&#20351;&#29992;Toast&#26469;&#26174;&#31034;&#24322;&#24120;&#20449;&#24687;&#10; new Thread() &#123;&#10; @Override&#10; public void run() &#123;&#10; Looper.prepare();&#10; Toast toast = Toast.makeText(mContext, &#34;&#31243;&#24207;&#20986;&#38169;&#65292;&#21363;&#23558;&#36864;&#20986;&#34;,&#10; Toast.LENGTH_LONG);&#10; toast.setGravity(Gravity.CENTER, 0, 0);&#10; toast.show();&#10;// MsgPrompt.showMsg(mContext, &#34;&#31243;&#24207;&#20986;&#38169;&#21862;&#34;, msg+&#34;\\n&#28857;&#30830;&#35748;&#36864;&#20986;&#34;);&#10; Looper.loop();&#10; &#125;&#10; &#125;.start();&#10; //&#25910;&#38598;&#35774;&#22791;&#20449;&#24687;&#10; collectCrashDeviceInfo(mContext);&#10; //&#20445;&#23384;&#38169;&#35823;&#25253;&#21578;&#25991;&#20214;&#10; saveCrashInfoToFile(ex);&#10; //&#21457;&#36865;&#38169;&#35823;&#25253;&#21578;&#21040;&#26381;&#21153;&#22120;&#10; //sendCrashReportsToServer(mContext);&#10; return true;&#10; &#125;&#10;&#10; /**&#10; * &#22312;&#31243;&#24207;&#21551;&#21160;&#26102;&#20505;, &#21487;&#20197;&#35843;&#29992;&#35813;&#20989;&#25968;&#26469;&#21457;&#36865;&#20197;&#21069;&#27809;&#26377;&#21457;&#36865;&#30340;&#25253;&#21578;&#10; */&#10; public void sendPreviousReportsToServer() &#123;&#10; sendCrashReportsToServer(mContext);&#10; &#125;&#10; /**&#10; * &#25226;&#38169;&#35823;&#25253;&#21578;&#21457;&#36865;&#32473;&#26381;&#21153;&#22120;,&#21253;&#21547;&#26032;&#20135;&#29983;&#30340;&#21644;&#20197;&#21069;&#27809;&#21457;&#36865;&#30340;.&#10; * @param ctx&#10; */&#10; private void sendCrashReportsToServer(Context ctx) &#123;&#10; String[] crFiles = getCrashReportFiles(ctx);&#10; if (crFiles != null &#38;&#38; crFiles.length &#62; 0) &#123;&#10; TreeSet&#60;String&#62; sortedFiles = new TreeSet&#60;String&#62;();&#10; sortedFiles.addAll(Arrays.asList(crFiles));&#10; for (String fileName : sortedFiles) &#123;&#10; File cr = new File(ctx.getFilesDir(), fileName);&#10; postReport(cr);&#10; cr.delete();// &#21024;&#38500;&#24050;&#21457;&#36865;&#30340;&#25253;&#21578;&#10; &#125;&#10; &#125;&#10; &#125;&#10; private void postReport(File file) &#123;&#10; // TODO &#21457;&#36865;&#38169;&#35823;&#25253;&#21578;&#21040;&#26381;&#21153;&#22120;&#10; &#125;&#10;&#10; /**&#10; * &#33719;&#21462;&#38169;&#35823;&#25253;&#21578;&#25991;&#20214;&#21517;&#10; * @param ctx&#10; * @return&#10; */&#10; private String[] getCrashReportFiles(Context ctx) &#123;&#10; File filesDir = ctx.getFilesDir();&#10; FilenameFilter filter = new FilenameFilter() &#123;&#10; public boolean accept(File dir, String name) &#123;&#10; return name.endsWith(CRASH_REPORTER_EXTENSION);&#10; &#125;&#10; &#125;;&#10; return filesDir.list(filter);&#10; &#125;&#10;&#10; /**&#10; * &#20445;&#23384;&#38169;&#35823;&#20449;&#24687;&#21040;&#25991;&#20214;&#20013;&#10; * @param ex&#10; * @return&#10; */&#10; private String saveCrashInfoToFile(Throwable ex) &#123;&#10; Writer info = new StringWriter();&#10; PrintWriter printWriter = new PrintWriter(info);&#10; ex.printStackTrace(printWriter);&#10; Throwable cause = ex.getCause();&#10; while (cause != null) &#123;&#10; cause.printStackTrace(printWriter);&#10; cause = cause.getCause();&#10; &#125;&#10; String result = info.toString();&#10; printWriter.close();&#10; mDeviceCrashInfo.put(&#34;EXEPTION&#34;, ex.getLocalizedMessage());&#10; mDeviceCrashInfo.put(STACK_TRACE, result);&#10; try &#123;&#10; //long timestamp = System.currentTimeMillis();&#10; Time t = new Time(&#34;GMT+8&#34;);&#10; t.setToNow(); // &#21462;&#24471;&#31995;&#32479;&#26102;&#38388;&#10; int date = t.year * 10000 + t.month * 100 + t.monthDay;&#10; int time = t.hour * 10000 + t.minute * 100 + t.second;&#10; String fileName = &#34;crash-&#34; + date + &#34;-&#34; + time + CRASH_REPORTER_EXTENSION;&#10; FileOutputStream trace = mContext.openFileOutput(fileName,&#10; Context.MODE_PRIVATE);&#10; mDeviceCrashInfo.store(trace, &#34;&#34;);&#10; trace.flush();&#10; trace.close();&#10; return fileName;&#10; &#125; catch (Exception e) &#123;&#10; Log.e(TAG, &#34;an error occured while writing report file...&#34;, e);&#10; &#125;&#10; return null;&#10; &#125;&#10;&#10; /**&#10; * &#25910;&#38598;&#31243;&#24207;&#23849;&#28291;&#30340;&#35774;&#22791;&#20449;&#24687;&#10; *&#10; * @param ctx&#10; */&#10; public void collectCrashDeviceInfo(Context ctx) &#123;&#10; try &#123;&#10; PackageManager pm = ctx.getPackageManager();&#10; PackageInfo pi = pm.getPackageInfo(ctx.getPackageName(),&#10; PackageManager.GET_ACTIVITIES);&#10; if (pi != null) &#123;&#10; mDeviceCrashInfo.put(VERSION_NAME,&#10; pi.versionName == null ? &#34;not set&#34; : pi.versionName);&#10; mDeviceCrashInfo.put(VERSION_CODE, &#34;&#34;+pi.versionCode);&#10; &#125;&#10; &#125; catch (PackageManager.NameNotFoundException e) &#123;&#10; Log.e(TAG, &#34;Error while collect package info&#34;, e);&#10; &#125;&#10; //&#20351;&#29992;&#21453;&#23556;&#26469;&#25910;&#38598;&#35774;&#22791;&#20449;&#24687;.&#22312;Build&#31867;&#20013;&#21253;&#21547;&#21508;&#31181;&#35774;&#22791;&#20449;&#24687;,&#10; //&#20363;&#22914;: &#31995;&#32479;&#29256;&#26412;&#21495;,&#35774;&#22791;&#29983;&#20135;&#21830; &#31561;&#24110;&#21161;&#35843;&#35797;&#31243;&#24207;&#30340;&#26377;&#29992;&#20449;&#24687;&#10; //&#20855;&#20307;&#20449;&#24687;&#35831;&#21442;&#32771;&#21518;&#38754;&#30340;&#25130;&#22270;&#10; Field[] fields = Build.class.getDeclaredFields();&#10; for (Field field : fields) &#123;&#10; try &#123;&#10; field.setAccessible(true);&#10; mDeviceCrashInfo.put(field.getName(), &#34;&#34;+field.get(null));&#10; if (DEBUG) &#123;&#10; Log.d(TAG, field.getName() + &#34; : &#34; + field.get(null));&#10; &#125;&#10; &#125; catch (Exception e) &#123;&#10; Log.e(TAG, &#34;Error while collect crash info&#34;, e);&#10; &#125;&#10; &#125;&#10; &#125;&#10;&#125;","categories":[{"name":"Android新技术实践","slug":"Android新技术实践","permalink":"http://logan62334.github.io/categories/Android新技术实践/"}],"tags":[{"name":"Android 应用崩溃 日志分析","slug":"Android-应用崩溃-日志分析","permalink":"http://logan62334.github.io/tags/Android-应用崩溃-日志分析/"}],"keywords":[{"name":"Android新技术实践","slug":"Android新技术实践","permalink":"http://logan62334.github.io/categories/Android新技术实践/"}]},{"title":"Git简易指南","slug":"Git-简易指南","date":"2016-03-01T14:48:52.000Z","updated":"2016-04-14T11:10:32.000Z","comments":true,"path":"2016/03/01/Git-简易指南/","link":"","permalink":"http://logan62334.github.io/2016/03/01/Git-简易指南/","excerpt":"","text":"今天来分享一下我在使用Git的过程中经常用到的一些命令： 1、创建新仓库 1git init 2、检出仓库 1git clone username@host:/path/to/repository 3、添加与提交 1git add *&#10;git commit -m &#34;&#20195;&#30721;&#25552;&#20132;&#20449;&#24687;&#34; 4、推送改动 1git push origin master 5、创建分支 1git checkout -b feature_x 6、切换分支 1git checkout master 7、删除本地分支 1git branch -d feature_x 8、删除远程分支 1git push origin :feature_x 9、将分支推送到远端仓库 1git push origin &#60;branch&#62; 10、更新你的本地仓库至最新改动 1git pull 11、合并其他分支到你的当前分支 1git merge &#60;branch&#62;","categories":[{"name":"Git","slug":"Git","permalink":"http://logan62334.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://logan62334.github.io/tags/Git/"}],"keywords":[{"name":"Git","slug":"Git","permalink":"http://logan62334.github.io/categories/Git/"}]},{"title":"WebView内存泄露终结解决方案","slug":"Android-WebView内存泄露终结解决方案","date":"2016-02-28T14:46:50.000Z","updated":"2016-08-19T02:46:49.000Z","comments":true,"path":"2016/02/28/Android-WebView内存泄露终结解决方案/","link":"","permalink":"http://logan62334.github.io/2016/02/28/Android-WebView内存泄露终结解决方案/","excerpt":"","text":"但凡是做Android开发的相信都对webview不会陌生，而且也对系统自带的webview本身存在的问题也是怨念很久了，一方面是本身对js的支持不是很好另外一方面就是经常被人诟病的内存泄露了。 不知道各位遇到同样问题的朋友是怎么解决的，网上也有很多解析和方案但至少在我的项目中是没任何效果的，今天我就分享一下我最终是怎么解决这些问题的（其实是很蠢的一个办法）。 需求背景：需要一个带有加载进度条的webview来正常的显示合作方和自己的web页面。 1、解决webview对一些js的支持： 1&#29992;JsBridge&#20195;&#26367;&#31995;&#32479;&#21407;&#29983;&#30340;webview&#65292;&#10;github&#22320;&#22336;&#65306;https://github.com/lzyzsd/JsBridge 2、解决webview内存泄露： 1@Bind(R.id.pb)&#10; ProgressBar pb;&#10; @Bind(R.id.mWebView)&#10; BridgeWebView mWebView;&#10;&#10; pb.setMax(100);&#10; mWebView.setWebChromeClient(new WebViewClient());&#10; mWebView.loadUrl(strWebsite);&#10;&#10; private class WebViewClient extends WebChromeClient &#123;&#10; @Override&#10; public void onProgressChanged(WebView view, int newProgress) &#123;&#10; try &#123;&#10; pb.setProgress(newProgress);&#10; if (newProgress == 100) &#123;&#10; pb.setVisibility(View.GONE);&#10; &#125;&#10; &#125; catch (Exception e) &#123;&#10; e.printStackTrace();&#10; &#125;&#10; super.onProgressChanged(view, newProgress);&#10; &#125;&#10; &#125;&#10;&#10; @Override&#10; protected void onDestroy() &#123;&#10; super.onDestroy();&#10; try &#123;&#10; if (mWebView != null) &#123;&#10; mWebView.removeAllViews();&#10; mWebView.destroy();&#10; mWebView = null;&#10; &#125;&#10; &#125; catch (Exception e) &#123;&#10; e.printStackTrace();&#10; &#125;&#10; &#125; 最后介绍大家一个用来检测应用内存泄露的工具：leakcanarygithub地址：https://github.com/square/leakcanary","categories":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}],"tags":[{"name":"webview","slug":"webview","permalink":"http://logan62334.github.io/tags/webview/"}],"keywords":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}]},{"title":"Activity启动后EditText是否自动弹出输入法虚拟键盘的问题","slug":"Activity启动后EditText是否自动弹出输入法虚拟键盘的问题","date":"2016-02-27T09:54:53.000Z","updated":"2016-08-19T02:46:58.000Z","comments":true,"path":"2016/02/27/Activity启动后EditText是否自动弹出输入法虚拟键盘的问题/","link":"","permalink":"http://logan62334.github.io/2016/02/27/Activity启动后EditText是否自动弹出输入法虚拟键盘的问题/","excerpt":"","text":"在开发过程中，我们经常会遇到Activity中包含EditText控件时会自动弹出虚拟键盘的情况，这是由于EditText自动获得焦点的缘故，只要让EditText失去焦点就行了，解决办法如下： 1、在Manifest.xml文件中相应的Activity下添加如下代码： 1android:windowSoftInputMode=&#34;stateHidden&#34; 2、让EditText失去焦点，用EditText的clearFocus： 1EditText edt = (EditText)findViewById(R.id.edt);&#10;edt.clearFocus(); 3、强制隐藏Android输入法窗口： 1EditText edt = (EditText)findViewById(R.id.edt); &#10;InputMethodManager imm = (InputMethodManager)getSystemService(INPUT_METHOD_SERVICE); &#10;imm.hideSoftInputFromWindow(edt.getWindowToken(), 0); 4、要求EditText始终不弹出虚拟键盘： 1EditText edt = (EditText)findViewById(R.id.edt); &#10;edt.setInputType(InputType.TYPE_NULL); 但有时我们确实是想让EditText自动获得焦点并弹出软键盘，在设置了EditText自动获得焦点后，软件盘不会弹出。注意：此时是由于刚跳到一个新的界面，界面未加载完全而无法弹出软键盘。此时应该适当的延迟弹出软键盘，如500毫秒（保证界面的数据加载完成，如果500毫秒仍未弹出，则延长至1000毫秒）。 1、可以在EditText后面加上一段代码： 1Timer timer = new Timer(); &#10;timer.schedule(new TimerTask() &#123; &#10;&#10; public void run() &#123; &#10; InputMethodManager inputManager = (InputMethodManager) editText.getContext().getSystemService(Context.INPUT_METHOD_SERVICE); &#10; inputManager.showSoftInput(editText, 0); &#10; &#125; &#10;&#10;&#125;, 500); 2、给activity配置加入属性： 1android:windowSoftInputMode=&#34;adjustResize&#34;","categories":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}],"tags":[{"name":"Android布局UI","slug":"Android布局UI","permalink":"http://logan62334.github.io/tags/Android布局UI/"}],"keywords":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}]},{"title":"Android持续集成技术实践","slug":"Android持续集成技术实践","date":"2016-02-02T08:08:59.000Z","updated":"2016-04-14T11:16:29.000Z","comments":true,"path":"2016/02/02/Android持续集成技术实践/","link":"","permalink":"http://logan62334.github.io/2016/02/02/Android持续集成技术实践/","excerpt":"","text":"背景 随着业务需求的演进，工程的复杂度会逐渐增加，自动化的践行日益强烈。事实上，工程的自动化一直是我们努力追求的目标，能有效提高我们的生产效率，最大化减少人为出错的概率，实现一些复杂的业务需求应变。 以我现在的公司为例，我们有22个渠道包，而且分为测试环境和生产环境，新的迭代开始除去要经常给测试人员直接烧测试版APP偶尔还会被商务和运营打断要求新增一个渠道包。尤其临近发版的一周，几乎每天都要新版本。这样的话，有两方面的影响：第一，打断了开发人员的开发进度；第二，开发人员打包效率低下。 要解决这个问题，必须实现移动端应用的自动化构建。具体说来就是，使用持续集成（CI）系统jenkins，自动检测并拉取Git上的最新代码，自动打包成不同的渠道apk，自动上传到内测分发平台蒲公英上和自建的FTP服务器上。（接下来，测试人员只要打开一个（或多个）固定的网址，扫描一下二维码，就能下载最新的版本了…） 环境 因为公司内网的服务器都是Windows操作系统，所以下面的操作都是以Windows为例，无论是哪个操作系统，jenkins的配置是一样的。 安装Jenkins 官网地址： http://jenkins-ci.org/，具体安装过程就不详写了跟平常装软件没什么区别。默认访问 http://localhost:8080/ , 可进入jenkins配置页面。 安装Jenkins相关插件 点击系统管理&gt;管理插件&gt;可选插件，可搜索以下插件安装 git插件(GIT plugin) ssh插件(SSH Credentials Plugin) Gradle插件(Gradle plugin) - android专用 注： 这里要用VPN或者修改系统的hosts文件才可以搜索到插件； 还有就是Windows中要装好JDK、Git、Gradle的环境。 装好后的效果图： 新建Job 主页面，新建 -&gt; 构建一个自由风格的软件项目即可。 配置git仓库 如果安装了git插件，在源码管理会出现Git，选中之后： 配置自动拉取最新代码 在构建触发器中，有两种自动拉取代码并编译的策略: 设置Poll SCM，设置定时器，定时检查代码更新，有更新则编译，否则不编译。 也可以设置Build periodically，周期性的执行编译任务。 配置gradle 如果安装gradle插件成功的话，应该会出现下图的Invoke Gradle script，配置一下: 这样，就能自动在project下的app的build/outputs/apk下生成相应的apk. 因为要区分测试环境和生产环境，所以我建了两个任务分别对应git上的主分支和子分支： FTP服务器搭建： 如果不会利用IIS搭建FTP的同学可以自行百度这里就不详细介绍了，记得把FTP根路径指向编译结果的目录：D:\\Jenkins\\jobs\\XXForAndroidTest\\workspace\\app\\build\\outputs\\apk 如果编译失败，请检查以下问题： 确保gradle、git、jdk的环境变量都配好 找不到local.properties中sdk定义，因为一般来说local.properties不会添加到版本库。 还有就是子项目中build.gradle的签名秘钥的路径问题 关于local.properties的定义： sdk.dir=xx/xx/android-sdk 再编译一般就会编译成功，当然当那些第三方库需要重新下载的话，编译可能会很慢。 总结一下 经过以上的折腾，以后终于可以彻底解放开发人员的双手去专心写代码了，我们在以后的工作中也要尽量去把精力放在业务上面提高工作效率。","categories":[{"name":"Android新技术实践","slug":"Android新技术实践","permalink":"http://logan62334.github.io/categories/Android新技术实践/"}],"tags":[{"name":"Android自动化构建","slug":"Android自动化构建","permalink":"http://logan62334.github.io/tags/Android自动化构建/"}],"keywords":[{"name":"Android新技术实践","slug":"Android新技术实践","permalink":"http://logan62334.github.io/categories/Android新技术实践/"}]},{"title":"Android热修复技术实践","slug":"Android热修复技术实践","date":"2016-02-01T09:54:53.000Z","updated":"2016-04-14T11:17:32.000Z","comments":true,"path":"2016/02/01/Android热修复技术实践/","link":"","permalink":"http://logan62334.github.io/2016/02/01/Android热修复技术实践/","excerpt":"","text":"背景我所在的公司是一家互联网金融领域的初创型公司，这类公司向来都是奉行快速迭代敏捷开发，所以基本我们的APP两周一个迭代有时候工期比较紧可能一周一个迭代，在缺乏专业QA人员的情况下单凭团队内其他做产品和运营的小伙伴的用最原始的人工点击测试下难免会遗漏一些潜在bug，于是当我们的应用发布之后，经过十多万用户的随机点击和产生的随机数据突然发现了一个严重bug需要进行紧急修复的时候公司各方就会忙得焦头烂额：还原bug、修复、重新打包App、测试、向各个应用市场和渠道换包、提示用户升级、用户下载、覆盖安装。有时候仅仅是为了修改了一行代码，也要付出巨大的成本进行换包和重新发布。 这时候就产生了一个问题：有没有办法以补丁的方式动态修复紧急Bug，不再需要重新发布App，不再需要用户重新下载，覆盖安装？ 虽然Android系统并没有提供这个技术，但是很幸运的告诉大家，答案是：可以的！而且在最初由QQ空间团队提出的热补丁动态修复技术方案后各大公司也都纷纷效仿，网上也出现了很多开源的解决方案。 实际案例让我们先来看一下网上都有哪些解决方案：XposeddexposedAndFixDroidFixDynamicAPKNuwa根据其描述，原理都来自：Android dex分包方案（http://codecloud.net/android-hot-load-6575.html）。这里就不对这些框架做过多对比了，因为原理都一致，实现的代码可能有些差异并不是特别大。这里我就先讲讲我是怎么去对热修复框架进行选型的吧，大家也看到了能实现这个功能的开源框架最近出了很多但并不是每个都适合我们现在的应用，Xposed它因为需要手机获得root权限才能生效所以首先pass。dexposed和AndFix是阿里基于Xposed的思路沉淀出的两套热修复解决方案，但是经过实际测试后发现它由于缺少动态库so文件所以在大部分机型上都不能正常运行：在其官方github上有类似很多的问题所以也只能放弃虽然它的补丁生成器做的很完善但是然并卵……DynamicAPK这个是携程最新公布的一个解决方案，但是由于它功能实在过于庞大而且其主要功能是用来做多apk动态加载的所以对热修复这块并不是重点实现。最后我把注意力放在了Nuwa上，但是经过实际部署测试后发现总是编译出错于是翻看了github上的issue列表发现有很多人也遇到了类似问题最后通过排除掉Nuwa.init所在的类后就fix好了，原来是Nuwa所在的class文件是无法进行修复的，所以在这个文件中尽量只写一些初始化代码和配置保证不会出问题。然后接下来遇到的就是补丁包生成不了的窘境了……继续google：https://github.com/jasonross/Nuwa/issues/23在这篇文章中找到了答案。好了接下来就是考虑到我们有20个渠道并且可能出现不同版本的补丁包的情况了，于是我申请了一台ftp服务器专门用来做为每次补丁包的存放路径，在这个路径下：这样在客户端通过每次拉取config配置文件的api进行判断当前版本是否需要打补丁，如果需要则根据当前渠道号从对应的ftp服务器下载，当用户第二次打开应用的时候就会load这个patch，这样就在用户毫不知情的情况下完成了问题修复。","categories":[{"name":"Android新技术实践","slug":"Android新技术实践","permalink":"http://logan62334.github.io/categories/Android新技术实践/"}],"tags":[{"name":"Android 热修复","slug":"Android-热修复","permalink":"http://logan62334.github.io/tags/Android-热修复/"}],"keywords":[{"name":"Android新技术实践","slug":"Android新技术实践","permalink":"http://logan62334.github.io/categories/Android新技术实践/"}]},{"title":"Android实现APP开屏广告","slug":"Android 实现APP开屏广告","date":"2016-01-02T00:54:53.000Z","updated":"2016-08-19T02:46:56.000Z","comments":true,"path":"2016/01/02/Android 实现APP开屏广告/","link":"","permalink":"http://logan62334.github.io/2016/01/02/Android 实现APP开屏广告/","excerpt":"","text":"代码详见：https://github.com/logan62334/StartupAdPage 功能点： 实现打开应用从moblieapi获取广告信息并存储在本地； 每次APP打开显示上一次缓存下来的广告； 可以控制广告停留时间和跳转页面 很容易扩展","categories":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}],"tags":[{"name":"Android 开屏广告","slug":"Android-开屏广告","permalink":"http://logan62334.github.io/tags/Android-开屏广告/"}],"keywords":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}]},{"title":"Android实现PopupWindow背景半透明（兼容方案）","slug":"Android实现PopupWindow背景半透明（兼容方案）","date":"2015-12-27T03:37:42.000Z","updated":"2016-08-19T02:47:21.000Z","comments":true,"path":"2015/12/27/Android实现PopupWindow背景半透明（兼容方案）/","link":"","permalink":"http://logan62334.github.io/2015/12/27/Android实现PopupWindow背景半透明（兼容方案）/","excerpt":"","text":"大家想必对PopupWindow不会很陌生吧，我们在开发中经常会遇到要求使其背景半透明的需求，但网上的很多解决方案只能是在大部分机型上满足要求，像华为这样的机型就会发现我们原来设置的背景变暗效果的代码并没有起效果。这里我贴出最终的兼容方案： View contentView; LayoutInflater mLayoutInflater = LayoutInflater.from(activity); contentView = mLayoutInflater.inflate(R.layout.layout_popupwindow, null); pop = new PopupWindow(contentView, ViewGroup.LayoutParams.MATCH_PARENT, (int) context.getResources().getDimension(R.dimen.y568)); TextView tvTitle = (TextView) contentView.findViewById(R.id.text); tvTitle.setText(strTitle); ListView listView = (ListView) contentView.findViewById(R.id.list); // 产生背景变暗效果 WindowManager.LayoutParams lp = activity.getWindow() .getAttributes(); lp.alpha = 0.4f; activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND); activity.getWindow().setAttributes(lp); pop.setTouchable(true); pop.setFocusable(true); pop.setBackgroundDrawable(new BitmapDrawable()); pop.setOutsideTouchable(true); pop.showAtLocation(contentView, Gravity.BOTTOM, 0, 0); pop.update(); pop.setOnDismissListener(new PopupWindow.OnDismissListener() { // 在dismiss中恢复透明度 public void onDismiss() { WindowManager.LayoutParams lp = activity.getWindow() .getAttributes(); lp.alpha = 1f; activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND); activity.getWindow().setAttributes(lp); } }); listView.setOnItemClickListener(onItemClickListener); listView.setAdapter(adapter); 注：特别是下面几行代码 // 产生背景变暗效果 WindowManager.LayoutParams lp = activity.getWindow() .getAttributes(); lp.alpha = 0.4f; activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND); activity.getWindow().setAttributes(lp); pop.setTouchable(true); pop.setFocusable(true); pop.setBackgroundDrawable(new BitmapDrawable()); pop.setOutsideTouchable(true); pop.showAtLocation(contentView, Gravity.BOTTOM, 0, 0); pop.update(); pop.setOnDismissListener(new PopupWindow.OnDismissListener() { // 在dismiss中恢复透明度 public void onDismiss() { WindowManager.LayoutParams lp = activity.getWindow() .getAttributes(); lp.alpha = 1f; activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND); activity.getWindow().setAttributes(lp); } }); 网上很多方案都要求加下面这两行代码，但其实加上反而会影响华为这种机型的显示效果 ColorDrawable dw = new ColorDrawable(-00000); popupWindow.setBackgroundDrawable(dw); *** ![FullStackEngineer的公众号，更多分享](https://github.com/logan62334/ImageArchive/raw/master/weixin/weixin.jpg)","categories":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}],"tags":[{"name":"Android布局UI","slug":"Android布局UI","permalink":"http://logan62334.github.io/tags/Android布局UI/"}],"keywords":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}]},{"title":"Android实现button一边圆角一边直角","slug":"Android实现button一边圆角一边直角","date":"2014-12-22T02:04:02.000Z","updated":"2016-08-19T02:47:17.000Z","comments":true,"path":"2014/12/22/Android实现button一边圆角一边直角/","link":"","permalink":"http://logan62334.github.io/2014/12/22/Android实现button一边圆角一边直角/","excerpt":"","text":"Android中要实现如下图的效果：这个要在真机中才能看出效果！！switch_button_left_checked.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot; &gt; &lt;!-- 填充的颜色：这里设置背景透明 --&gt; &lt;solid android:color=&quot;#ff304a&quot; /&gt; &lt;!-- 边框的颜色 ：不能和窗口背景色一样 --&gt; &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#ff304a&quot; /&gt; &lt;!-- 设置按钮的四个角为弧形 --&gt; &lt;!-- android:radius 弧形的半径 --&gt; &lt;corners android:bottomLeftRadius=&quot;5dip&quot; android:bottomRightRadius=&quot;0dip&quot; android:topLeftRadius=&quot;5dip&quot; android:topRightRadius=&quot;0dip&quot; /&gt; &lt;!-- padding：Button里面的文字与Button边界的间隔 --&gt; &lt;padding android:bottom=&quot;5dp&quot; android:left=&quot;5dp&quot; android:right=&quot;5dp&quot; android:top=&quot;5dp&quot; /&gt; &lt;/shape&gt; switch_button_left.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot; &gt; &lt;!-- 填充的颜色：这里设置背景透明 --&gt; &lt;solid android:color=&quot;#00000000&quot; /&gt; &lt;!-- 边框的颜色 ：不能和窗口背景色一样 --&gt; &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#ff304a&quot; /&gt; &lt;!-- 设置按钮的四个角为弧形 --&gt; &lt;!-- android:radius 弧形的半径 --&gt; &lt;corners android:bottomLeftRadius=&quot;5dip&quot; android:bottomRightRadius=&quot;0dip&quot; android:topLeftRadius=&quot;5dip&quot; android:topRightRadius=&quot;0dip&quot; /&gt; &lt;!-- padding：Button里面的文字与Button边界的间隔 --&gt; &lt;padding android:bottom=&quot;5dp&quot; android:left=&quot;5dp&quot; android:right=&quot;5dp&quot; android:top=&quot;5dp&quot; /&gt; &lt;/shape&gt; switch_button_right_checked.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot; &gt; &lt;!-- 填充的颜色：这里设置背景透明 --&gt; &lt;solid android:color=&quot;#ff304a&quot; /&gt; &lt;!-- 边框的颜色 ：不能和窗口背景色一样 --&gt; &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#ff304a&quot; /&gt; &lt;!-- 设置按钮的四个角为弧形 --&gt; &lt;!-- android:radius 弧形的半径 --&gt; &lt;corners android:bottomLeftRadius=&quot;0dip&quot; android:bottomRightRadius=&quot;5dip&quot; android:topLeftRadius=&quot;0dip&quot; android:topRightRadius=&quot;5dip&quot; /&gt; &lt;!-- padding：Button里面的文字与Button边界的间隔 --&gt; &lt;padding android:bottom=&quot;5dp&quot; android:left=&quot;5dp&quot; android:right=&quot;5dp&quot; android:top=&quot;5dp&quot; /&gt; &lt;/shape&gt; switch_button_right.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot; &gt; &lt;!-- 填充的颜色：这里设置背景透明 --&gt; &lt;solid android:color=&quot;#00000000&quot; /&gt; &lt;!-- 边框的颜色 ：不能和窗口背景色一样 --&gt; &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#ff304a&quot; /&gt; &lt;!-- 设置按钮的四个角为弧形 --&gt; &lt;!-- android:radius 弧形的半径 --&gt; &lt;corners android:bottomLeftRadius=&quot;0dip&quot; android:bottomRightRadius=&quot;5dip&quot; android:topLeftRadius=&quot;0dip&quot; android:topRightRadius=&quot;5dip&quot; /&gt; &lt;!-- padding：Button里面的文字与Button边界的间隔 --&gt; &lt;padding android:bottom=&quot;5dp&quot; android:left=&quot;5dp&quot; android:right=&quot;5dp&quot; android:top=&quot;5dp&quot; /&gt; &lt;/shape&gt; button.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;horizontal&quot; android:padding=&quot;10dp&quot; &gt; &lt;Button android:id=&quot;@+id/wangdaileiBtn&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;40dp&quot; android:layout_weight=&quot;1&quot; android:scaleType=&quot;fitXY&quot; android:text=&quot;&quot; android:background=&quot;@drawable/switch_button_left_checked&quot; /&gt; &lt;Button android:id=&quot;@+id/baobaoleiBtn&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;40dp&quot; android:layout_weight=&quot;1&quot; android:text=&quot;&quot; android:scaleType=&quot;fitXY&quot; android:background=&quot;@drawable/switch_button_right&quot; /&gt; &lt;/LinearLayout&gt;","categories":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}],"tags":[{"name":"Android布局UI","slug":"Android布局UI","permalink":"http://logan62334.github.io/tags/Android布局UI/"}],"keywords":[{"name":"Android笔记","slug":"Android笔记","permalink":"http://logan62334.github.io/categories/Android笔记/"}]}]}